<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>CDS-102: Introduction to Computational and Data Sciences Lab</title><link href="https://mason-su18-cds-102-2a1.github.io/" rel="alternate"></link><link href="https://mason-su18-cds-102-2a1.github.io/feeds/all.atom.xml" rel="self"></link><id>https://mason-su18-cds-102-2a1.github.io/</id><updated>2018-06-19T13:30:00-04:00</updated><entry><title>Moneyball</title><link href="https://mason-su18-cds-102-2a1.github.io/labs/lab-07-moneyball/" rel="alternate"></link><published>2018-06-19T13:30:00-04:00</published><updated>2018-06-19T13:30:00-04:00</updated><author><name>Dr. Glasbrenner</name></author><id>tag:mason-su18-cds-102-2a1.github.io,2018-06-19:/labs/lab-07-moneyball/</id><summary type="html">Build predictive models of baseball data, just like in the movie &lt;em&gt;Moneyball&lt;/em&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;This week’s lab will show you how to build predictive models using linear regression and data collected on the 2011 Major League Baseball&amp;nbsp;season.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="data-science-in-sports-and-at-the-movies"&gt;Data science in sports and at the&amp;nbsp;movies&lt;/h2&gt;
&lt;p&gt;The movie &lt;a href="http://en.wikipedia.org/wiki/Moneyball_(film)"&gt;Moneyball&lt;/a&gt; focuses on the “quest for the secret of success in baseball”. It follows a low-budget team, the Oakland Athletics, who believed that underused statistics, such as a player’s ability to get on base, better predict the ability to score runs than typical statistics like home runs, RBIs (runs batted in), and batting average. Obtaining players who excelled in these underused statistics turned out to be much more affordable for the&amp;nbsp;team.&lt;/p&gt;
&lt;h2 id="about-this-weeks-dataset"&gt;About this week’s&amp;nbsp;dataset&lt;/h2&gt;
&lt;p&gt;This dataset is the data from the 2011 Major League Baseball (&lt;span class="caps"&gt;MLB&lt;/span&gt;) season, containing several different kinds of summary statistics for the different&amp;nbsp;teams.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th&gt;Variable&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;&lt;span class="monospace"&gt;team&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Name of baseball team&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;&lt;span class="monospace"&gt;runs&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Number of runs scored&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;&lt;span class="monospace"&gt;at_bats&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Number of players at bat&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;&lt;span class="monospace"&gt;hits&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Number of hits&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;&lt;span class="monospace"&gt;homeruns&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Number of homeruns&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;&lt;span class="monospace"&gt;bat_avg&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Team batting average&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;&lt;span class="monospace"&gt;strikeouts&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Number of strikeouts&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;&lt;span class="monospace"&gt;stolen_bases&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Number of bases stolen&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;&lt;span class="monospace"&gt;wins&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Number of games won&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;&lt;span class="monospace"&gt;new_onbase&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;On-base percentage&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;&lt;span class="monospace"&gt;new_slug&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Slugging percentage (total bases divided by &lt;span class="monospace"&gt;at_bats&lt;/span&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;&lt;span class="monospace"&gt;new_obs&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;On-base plus slugging percentages&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The first seven variables, &lt;code&gt;at_bats&lt;/code&gt;, &lt;code&gt;hits&lt;/code&gt;, &lt;code&gt;homeruns&lt;/code&gt;, &lt;code&gt;bat_avg&lt;/code&gt;, &lt;code&gt;strikeouts&lt;/code&gt;, &lt;code&gt;stolen_bases&lt;/code&gt;, and &lt;code&gt;wins&lt;/code&gt;, are the &lt;a href="https://en.wikipedia.org/wiki/Baseball_statistics#Commonly_used_statistics"&gt;traditionally used variables&lt;/a&gt; for baseball statistics. The last three variables, &lt;code&gt;new_onbase&lt;/code&gt;, &lt;code&gt;new_slug&lt;/code&gt;, and &lt;code&gt;new_obs&lt;/code&gt;, are the suggested variables that the author of &lt;em&gt;Moneyball&lt;/em&gt; claims were better predictors of the &lt;code&gt;runs&lt;/code&gt; variable.&lt;/p&gt;
&lt;ol class="example" type="1"&gt;
&lt;li&gt;What type of plot would you use to display the relationship between &lt;code&gt;runs&lt;/code&gt; and one of the other numerical variables? Plot this relationship using the variable &lt;code&gt;at_bats&lt;/code&gt; as the explanatory variable (horizontal axis). Does the relationship look linear? Explain what you’ve noticed in the plot that makes you think the relationship is linear (or not&amp;nbsp;linear).&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="building-a-linear-model"&gt;Building a linear&amp;nbsp;model&lt;/h2&gt;
&lt;p&gt;R provides a straightforward way to build a least-squares linear regression model with the &lt;code&gt;lm()&lt;/code&gt; function. The term “least-squares” refers to the method used to find the linear model, which is to minimize the sum of the squared residuals, and the &lt;strong&gt;residual&lt;/strong&gt; is the leftover variation in the data after accounting for the model fit. As an example, to build a least-squares model of &lt;code&gt;runs&lt;/code&gt; using &lt;code&gt;at_bats&lt;/code&gt; as the explanatory variable, we&amp;nbsp;write,&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;runs_at_bats_model &amp;lt;- lm(runs ~ at_bats, data = mlb11)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first argument in the function &lt;code&gt;lm&lt;/code&gt; is a formula that takes the form &lt;code&gt;response ~ explanatory&lt;/code&gt;. Here it can be read that we want to make a linear model of &lt;code&gt;runs&lt;/code&gt; as a function of &lt;code&gt;at_bats&lt;/code&gt;. The second argument specifies that R should look in the &lt;code&gt;mlb11&lt;/code&gt; data frame to find the &lt;code&gt;runs&lt;/code&gt; and &lt;code&gt;at_bats&lt;/code&gt; variables.&lt;/p&gt;
&lt;p&gt;Having assigned the model to &lt;code&gt;runs_at_bats_model&lt;/code&gt;, we can use a couple of convenience functions from the handy &lt;span class="monospace"&gt;broom&lt;/span&gt; package — this was installed when we installed &lt;span class="monospace"&gt;tidyverse&lt;/span&gt; — to get a basic overview of the model. To get a data frame summarizing the model parameters, we use the &lt;code&gt;tidy()&lt;/code&gt; function,&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;runs_at_bats_model %&amp;gt;%
  tidy() %&amp;gt;%
  as_data_frame()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;as_data_frame()&lt;/code&gt; is used to convert the base R data frame that &lt;code&gt;tidy()&lt;/code&gt; returns into the now-familiar &lt;span class="monospace"&gt;tibble&lt;/span&gt; format. This table contains the model coefficients, with the first column pertaining to the linear model’s y-intercept and the coefficient (slope) of &lt;code&gt;at_bats&lt;/code&gt;. With this table, we can write down the formal expression for the least squares regression line for our linear model: &lt;span class="math display"&gt;\[\text{runs}(\text{at\_bats})=-2789.2429+0.6305\times\text{at\_bats}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Additional information about the model, such as the model’s &lt;span class="math inline"&gt;\(R^2\)&lt;/span&gt; paramter, can be obtained using the &lt;code&gt;glance()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;runs_at_bats_model %&amp;gt;%
  glance() %&amp;gt;%
  as_data_frame()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;span class="math inline"&gt;\(R^2\)&lt;/span&gt; value represents the proportion of variability in the response variable that is explained by the explanatory variable. For this model, 37.3% of the variability in runs is explained by &lt;code&gt;at_bats&lt;/code&gt;.&lt;/p&gt;
&lt;ol start="2" class="example" type="1"&gt;
&lt;li&gt;Fit a new model that uses &lt;code&gt;homeruns&lt;/code&gt; to predict &lt;code&gt;runs&lt;/code&gt; and obtain the coefficients and other details about the model using &lt;code&gt;tidy()&lt;/code&gt; and &lt;code&gt;glance()&lt;/code&gt;. What do the intercept and the slope tell us about the relationship between the success of a team and the number of home runs its players hit during the&amp;nbsp;season?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="prediction-and-prediction-errors"&gt;Prediction and prediction&amp;nbsp;errors&lt;/h2&gt;
&lt;p&gt;After building a model, we would like to know what it predicts and what the residuals look like. The &lt;span class="monospace"&gt;modelr&lt;/span&gt; package, which is part of the &lt;span class="monospace"&gt;tidyverse&lt;/span&gt;, provides us with a function for adding the predictions to our data frame. To get the predictions for the model &lt;code&gt;runs ~ at_bats&lt;/code&gt;,&amp;nbsp;run:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;runs_at_bats_df &amp;lt;- mlb11 %&amp;gt;%
  add_predictions(runs_at_bats_model)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First, let’s directly compare the model with the underlying data. We use &lt;span class="monospace"&gt;ggplot2&lt;/span&gt; to create a scatter plot and overlay the model line on&amp;nbsp;top,&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;ggplot(data = runs_at_bats_df) +
  geom_point(mapping = aes(x = at_bats, y = runs)) +
  geom_line(
    mapping = aes(x = at_bats, y = pred),
    color = &amp;quot;indianred3&amp;quot;,  # color and size are used here to help the
    size = 1               # the model line stand out.
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Although the &lt;code&gt;pred&lt;/code&gt; column in &lt;code&gt;runs_at_bats_df&lt;/code&gt; only corresponds to predictions for the input values of the &lt;code&gt;at_bats&lt;/code&gt; column, in general the model allows us to predict the value of &lt;code&gt;runs&lt;/code&gt; at &lt;strong&gt;any&lt;/strong&gt; value of &lt;code&gt;at_bats&lt;/code&gt;, including values that are outside the range &lt;span class="math inline"&gt;\([5417, 5710]\)&lt;/span&gt;. Predictions beyond the range of the observed data is referred to as &lt;em&gt;extrapolation&lt;/em&gt;, and making strong predictions based on extrapolation is not recommended. Predictions made within the range of the data are considered more&amp;nbsp;reliable.&lt;/p&gt;
&lt;p&gt;You have a couple of options available if you want to make predictions at values of &lt;code&gt;at_bats&lt;/code&gt; not found in the &lt;code&gt;mlb11&lt;/code&gt; data frame. If you are interested in a few specific points, then you can build a data frame by hand and pipe it into &lt;code&gt;add_predictions()&lt;/code&gt;,&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;runs_at_bats_more_pred &amp;lt;- data_frame(  # Creates a data frame with a column
  at_bats = combine(5400, 5650)        # named at_bats with two values, 5400
) %&amp;gt;%                                  # and 5650
  add_predictions(runs_at_bats_model)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you instead want to check predictions for a collection of points at regularly-spaced intervals, you can use the &lt;code&gt;seq_range()&lt;/code&gt; function as&amp;nbsp;follows:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;runs_at_bats_seq_pred &amp;lt;- data_frame(  # Creates a data frame with a column
  at_bats = seq_range(                # named at_bats that has values
    x = combine(5400, 5700),          # incrementing by 20 over the range
    by = 20                           # [5400, 5700]
  )
) %&amp;gt;%
  add_predictions(runs_at_bats_model)&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="3" class="example" type="1"&gt;
&lt;li&gt;If a team manager saw the least squares regression line and not the actual data, how many runs would he or she predict for a team with 5,578 &lt;code&gt;at_bats&lt;/code&gt;? Is this an overestimate or an underestimate, and by how much? In other words, what is the residual for this&amp;nbsp;prediction?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="residuals"&gt;Residuals&lt;/h2&gt;
&lt;p&gt;As discussed earlier, the prediction error is defined as the difference between the predicted value and the observed value is called the &lt;strong&gt;residual&lt;/strong&gt;. Visually, the residual is the vertical distance from the model line to each data&amp;nbsp;point.&lt;/p&gt;
&lt;ol start="4" class="example" type="1"&gt;
&lt;li&gt;&lt;p&gt;Use the following code to visualize the residuals connected to each data&amp;nbsp;point,&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;ggplot(runs_at_bats_df) +
  geom_point(mapping = aes(x = at_bats, y = runs)) +
  geom_line(
    mapping = aes(x = at_bats, y = pred),
    color = &amp;quot;indianred3&amp;quot;,
    size = 1
  ) +
  geom_linerange(
    mapping = aes(x = at_bats, ymin = pred, ymax = runs),
    linetype = &amp;quot;dashed&amp;quot;
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which data point appears to have the smallest residual? Which data point appears to have the largest&amp;nbsp;residual?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It is typical to visualize how a model’s residuals are distributed using a histogram to get a sense of their center, shape, and overall spread. Before we can plot the histogram, we need to collect the residuals into a new column in our dataset. Just like for the predictions, &lt;span class="monospace"&gt;modelr&lt;/span&gt; provides the function &lt;code&gt;add_residuals()&lt;/code&gt; for this&amp;nbsp;purpose,&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;runs_at_bats_df2 &amp;lt;- runs_at_bats_df %&amp;gt;%
  add_residuals(runs_at_bats_model)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The residuals are added as a new column named &lt;code&gt;resid&lt;/code&gt;.&lt;/p&gt;
&lt;ol start="5" class="example" type="1"&gt;
&lt;li&gt;Create a histogram of the residuals stored in &lt;code&gt;runs_at_bats_df2&lt;/code&gt;. Make sure you choose an appropriate bin width for the distribution. What is the shape and center of the&amp;nbsp;residuals?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="conditions-for-using-a-linear-model"&gt;Conditions for using a linear&amp;nbsp;model&lt;/h2&gt;
&lt;p&gt;Three conditions must be met in order for a linear model built using &lt;code&gt;lm()&lt;/code&gt; to be&amp;nbsp;reliable:&lt;/p&gt;
&lt;div class="additional-questions"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Linearity:&lt;/strong&gt; The relationship between the explanatory variable and the response variable must be&amp;nbsp;linear&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Nearly normal residuals:&lt;/strong&gt; The residuals should be nearly normal (i.e. follow a bell curve&amp;nbsp;shape)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Constant variability:&lt;/strong&gt; The variability of the points around the model line should be roughly&amp;nbsp;constant&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Let’s walk through each of the three conditions and discuss what we can plot to help us assess whether the linear model is&amp;nbsp;reliable.&lt;/p&gt;
&lt;h3 id="linearity"&gt;Linearity&lt;/h3&gt;
&lt;p&gt;The plot we created at the beginning of the &lt;a href="#prediction-and-prediction-errors"&gt;prediction and prediction errors&lt;/a&gt; section already provides us with an approximate idea of whether the relationship between the explanatory and response variable is linear. However, there are two other types of plots that we can create that will help in our assessment, an &lt;strong&gt;observed versus predicted plot&lt;/strong&gt; and a &lt;strong&gt;residual versus predicted plot&lt;/strong&gt;. The code to make an observed versus predicted plot&amp;nbsp;is,&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;ggplot(data = runs_at_bats_df2) +
  geom_point(mapping = aes(x = pred, y = runs)) +
  geom_abline(slope = 1, intercept = 0, color = &amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and the code to make a residual versus predicted plot&amp;nbsp;is,&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;ggplot(data = runs_at_bats_df2) +
  geom_point(mapping = aes(x = pred, y = resid)) +
  geom_ref_line(h = 0)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the points in either plot appear to follow a non-linear (curved) trend, then that’s a tell-tale sign that the condition for linearity has been&amp;nbsp;violated.&lt;/p&gt;
&lt;ol start="6" class="example" type="1"&gt;
&lt;li&gt;Create the &lt;strong&gt;observed versus predicted&lt;/strong&gt; and &lt;strong&gt;residual versus predicted&lt;/strong&gt; plots for the &lt;code&gt;runs ~ at_bats&lt;/code&gt; model. Interpret the plots and conclude whether the relationship between &lt;code&gt;runs&lt;/code&gt; and &lt;code&gt;at_bats&lt;/code&gt; is linear or&amp;nbsp;non-linear.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="nearly-normal-residuals"&gt;Nearly normal&amp;nbsp;residuals&lt;/h3&gt;
&lt;p&gt;The histogram we created in the &lt;a href="#residuals"&gt;residuals&lt;/a&gt; section gives us a rough idea of whether the residuals are nearly normal, but we should have a more precise method for figuring this out. One such method is to build a Q-Q plot using &lt;code&gt;geom_qq()&lt;/code&gt;, which is designed to show us precisely where the distribution of residuals deviates from normality. A reference line can also be included in the Q-Q plot, such that any points found on this line are following a normal distribution and any points away from the line are deviating from the normal distribution. Unfortunately, there is no input for &lt;code&gt;geom_qq()&lt;/code&gt; or helper function in &lt;span class="monospace"&gt;ggplot2&lt;/span&gt; that finds this reference line automatically, but computing it is straightforward. In fact, because the procedure is so predictable, we can define a &lt;strong&gt;custom function&lt;/strong&gt; that computes the reference line automatically for us. Defining your own functions in R is a more advanced concept, and so here we’re only just “dipping our toe” in, so to&amp;nbsp;speak.&lt;/p&gt;
&lt;ol start="7" class="example" type="1"&gt;
&lt;li&gt;&lt;p&gt;Define the custom function &lt;code&gt;geom_qq_ref_line()&lt;/code&gt; by putting the following code block in your lab&amp;nbsp;report:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;geom_qq_ref_line &amp;lt;- function(data, variable) {
  qq_x &amp;lt;- qnorm(p = combine(0.25, 0.75))
  qq_y &amp;lt;- quantile(
    x = pull(data, variable),
    probs = combine(0.25, 0.75),
    type = 1
  )
  qq_slope &amp;lt;- diff(qq_y) / diff(qq_x)
  qq_int &amp;lt;- pluck(qq_y, 1) - qq_slope * pluck(qq_x, 1)

  geom_abline(intercept = qq_int, slope = qq_slope)
}&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now that we’ve defined a custom function for generating reference line, let’s inspect the Q-Q plot of the model&amp;nbsp;residuals.&lt;/p&gt;
&lt;ol start="8" class="example" type="1"&gt;
&lt;li&gt;&lt;p&gt;Create a Q-Q plot of the model’s residuals using the following&amp;nbsp;code:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;ggplot(data = runs_at_bats_df2) +
  geom_qq(mapping = aes(sample = resid)) +
  geom_qq_ref_line(data = runs_at_bats_df2, variable = &amp;quot;resid&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Based on the resulting plot, does it appear that the condition that residuals must be nearly normal is&amp;nbsp;met?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="constant-variability"&gt;Constant&amp;nbsp;variability&lt;/h3&gt;
&lt;p&gt;The residual versus predicted plot you created in &lt;strong&gt;Exercise 6&lt;/strong&gt; can be used to determine whether the variability of the points around the model line remain approximately constant. If the residual spread seems to increase or decrease as the predicted value changes, then this condition is&amp;nbsp;violated.&lt;/p&gt;
&lt;ol start="9" class="example" type="1"&gt;
&lt;li&gt;Interpret the residual versus predicted plot from &lt;strong&gt;Exercise 6&lt;/strong&gt; and conclude whether the constant variability condition is&amp;nbsp;met.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="additional-questions"&gt;Additional&amp;nbsp;questions&lt;/h2&gt;
&lt;div class="additional-questions"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Choose another traditional variable from &lt;code&gt;mlb11&lt;/code&gt; that you think might be a good predictor of &lt;code&gt;runs&lt;/code&gt;. Fit a linear model and create &lt;strong&gt;observed versus predicted&lt;/strong&gt; and &lt;strong&gt;residual versus predicted&lt;/strong&gt; plots (you do not need to check the conditions for using the linear model). Does your variable seem to predict &lt;code&gt;runs&lt;/code&gt; better than &lt;code&gt;at_bats&lt;/code&gt;? Determine this by comparing the &lt;span class="math inline"&gt;\(R^2\)&lt;/span&gt; values (obtained using &lt;code&gt;glance()&lt;/code&gt;) for the two&amp;nbsp;models.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Now use one of the three newer variables, &lt;code&gt;new_onbase&lt;/code&gt;, &lt;code&gt;new_slug&lt;/code&gt;, and &lt;code&gt;new_obs&lt;/code&gt;, to build a linear model using the same method as before. These are the statistics used by the author of &lt;em&gt;Moneyball&lt;/em&gt; to predict a teams success. After fitting the model you should create &lt;strong&gt;observed versus predicted&lt;/strong&gt; and &lt;strong&gt;residual versus predicted&lt;/strong&gt; plots (you do not need to check the conditions for using the linear model) and also compare the new model’s &lt;span class="math inline"&gt;\(R^2\)&lt;/span&gt; values (obtained using &lt;code&gt;glance()&lt;/code&gt;) with the others. Based on what you find, conclude whether the new variable is more or less effective at predicting runs than the two older variables you&amp;nbsp;investigated.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="how-to-submit"&gt;How to&amp;nbsp;submit&lt;/h2&gt;
&lt;p&gt;When you are ready to submit, be sure to save, commit, and push your final result so that everything is synchronized to Github. Then, navigate to &lt;strong&gt;your copy&lt;/strong&gt; of the Github repository you used for this assignment. You should see your repository, along with the updated files that you just synchronized to Github. Confirm that your files are up-to-date, and then do the following&amp;nbsp;steps:&lt;/p&gt;
&lt;div class="pull-request"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Click the &lt;em&gt;Pull Requests&lt;/em&gt; tab near the top of the&amp;nbsp;page.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the green button that says “New pull&amp;nbsp;request”.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the dropdown menu button labeled “base:”, and select the option &lt;code&gt;starting&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Confirm that the dropdown menu button labeled “compare:” is set to &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the green button that says “Create pull&amp;nbsp;request”.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Give the &lt;em&gt;pull request&lt;/em&gt; the following title: &lt;span class="monospace"&gt;Submission: Lab 7, FirstName LastName&lt;/span&gt;, replacing &lt;span class="monospace"&gt;FirstName&lt;/span&gt; and &lt;span class="monospace"&gt;LastName&lt;/span&gt; with your actual first and last&amp;nbsp;name.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the messagebox, write: &lt;span class="monospace"&gt;My lab report is ready for grading @jkglasbrenner&lt;/span&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Click “Create pull request” to lock in your&amp;nbsp;submission.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="credits"&gt;Credits&lt;/h2&gt;
&lt;p&gt;This lab, &lt;em&gt;Moneyball&lt;/em&gt;, is a derivative of &lt;a href="https://htmlpreview.github.io/?https://github.com/andrewpbray/oiLabs-base-R/blob/master/simple_regression/simple_regression.html"&gt;OpenIntro Lab 9 – Introduction to linear regression&lt;/a&gt; by Andrew Bray and Mine Çetinkaya-Rundel, which was adapted from a lab written by the faculty and TAs of &lt;span class="caps"&gt;UCLA&lt;/span&gt; Statistics, used under &lt;a href="https://creativecommons.org/licenses/by-sa/3.0/"&gt;&lt;span class="caps"&gt;CC&lt;/span&gt; &lt;span class="caps"&gt;BY&lt;/span&gt;-&lt;span class="caps"&gt;SA&lt;/span&gt; 3.0&lt;/a&gt;. &lt;em&gt;Moneyball&lt;/em&gt; is licensed under a &lt;a href="http://creativecommons.org/licenses/by-sa/4.0/"&gt;Creative Commons Attribution-ShareAlike 4.0 International License&lt;/a&gt; by James&amp;nbsp;Glasbrenner.&lt;/p&gt;
</content><category term="lab"></category></entry><entry><title>Speed of light</title><link href="https://mason-su18-cds-102-2a1.github.io/labs/lab-06-speed-of-light/" rel="alternate"></link><published>2018-06-14T13:30:00-04:00</published><updated>2018-06-14T13:30:00-04:00</updated><author><name>Dr. Glasbrenner</name></author><id>tag:mason-su18-cds-102-2a1.github.io,2018-06-14:/labs/lab-06-speed-of-light/</id><summary type="html">&lt;span style="monospace"&gt;infer&lt;/span&gt; the speed of light using Simon Newcomb&amp;#8217;s famous&amp;nbsp;dataset</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;This week’s lab will show you how to apply statistical methods and resampling techniques to a dataset from the natural sciences, Simon Newcomb’s measurements of the speed of light. Through this, we will see how statistical methods can help us to put the scientific method into practice and provide you with hands-on experience with the kinds of data analysis a scientist will use after completing a series of experimental&amp;nbsp;measurements.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="natural-science-data-science"&gt;Natural science, data&amp;nbsp;science&lt;/h2&gt;
&lt;p&gt;Many of the datasets we’ve worked through in our labs this semester have come from fields outside of the natural sciences. That doesn’t mean that the skills we’re building don’t have a useful application in fields such as physics, chemistry, and biology. For that reason, this week we will apply statistical methods to a dataset from the natural sciences that can be used to calculate the speed of&amp;nbsp;light.&lt;/p&gt;
&lt;h2 id="about-this-weeks-dataset"&gt;About this week’s&amp;nbsp;dataset&lt;/h2&gt;
&lt;p&gt;The astronomer and applied mathematician Simon Newcomb collected this dataset over three separate days between the dates of July 24, 1882 and September 5, 1882 &lt;span class="citation" data-cites="stigler:robust Newcomb:1882"&gt; [1,2]&lt;/span&gt; in Washington, &lt;span class="caps"&gt;DC&lt;/span&gt;. He performed the measurements using an apparatus design similar to Léon Foucault’s system of rotating mirrors &lt;span class="citation" data-cites="jaffe:1960"&gt; [3]&lt;/span&gt;, which allowed Newcomb to measure the time it took a beam of light to travel from Fort Myer on the west bank of the Potomac to a mirror located at the Washington monument and back &lt;span class="citation" data-cites="stigler:robust Carter:2002"&gt; [1,4]&lt;/span&gt;, corresponding to a distance of 7443.73 meters. This dataset contains 66 observations, which have been transformed so that the dataset could be analyzed as a series of integers. To convert a dataset value &lt;span class="math inline"&gt;\(t\)&lt;/span&gt; to the actual transit time &lt;span class="math inline"&gt;\(t_{meas}\)&lt;/span&gt; in seconds, use the&amp;nbsp;formula,&lt;/p&gt;
&lt;p&gt;&lt;span class="math display"&gt;\[\text{t}_{\text{meas}}=\dfrac{\dfrac{\text{t}}{1000}+24.8}{1000000}\]&lt;/span&gt;&lt;/p&gt;
&lt;h2 id="visualizing-and-quantifying-the-distribution"&gt;Visualizing and quantifying the&amp;nbsp;distribution&lt;/h2&gt;
&lt;p&gt;Let’s start by doing the usual practice of getting to know our dataset. There’s only one relevant variable in this dataset, &lt;code&gt;time&lt;/code&gt;, so it’s the distribution of the measured times that matter. Let’s appraise the distribution of time measurements by creating some&amp;nbsp;visualizations:&lt;/p&gt;
&lt;ol class="example" type="1"&gt;
&lt;li&gt;Visualize the dataset distribution as a boxplot — use &lt;code&gt;geom_boxplot(aes(x = &amp;quot;unfiltered&amp;quot;, y = time)) + coord_flip()&lt;/code&gt; — and as a probability mass function (&lt;span class="caps"&gt;PMF&lt;/span&gt;) — use &lt;code&gt;geom_histogram()&lt;/code&gt; with &lt;code&gt;y = ..density..&lt;/code&gt; inside &lt;code&gt;aes()&lt;/code&gt; — with a binwidth that allows you can see the full dataset (only identical numbers should have counts larger than 1). Describe the center, shape, and spread of the distribution (don’t forget to mention the&amp;nbsp;outliers).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One of the things you’ll immediately notice when visualizing this dataset is how pronounced the outliers are. The experimental setup involved a rapidly rotating mirror that had to be precisely tuned. Given that the speed of light is so high, small variations in the rotation speed could significantly impact the measured travel times. As such, it’s quite possible these outliers are due to experimental error. However, without further information we cannot be sure that this is the case. Thus, the best choice is to analyze two versions of the dataset, one with the outliers removed and one where we keep all data&amp;nbsp;points.&lt;/p&gt;
&lt;ol start="2" class="example" type="1"&gt;
&lt;li&gt;Create a second, filtered version of the dataset that removes the outliers that you see in the&amp;nbsp;distribution.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Another useful visualization for understanding a dataset is the cumulative distribution function (&lt;span class="caps"&gt;CDF&lt;/span&gt;), which creates a map from the distribution’s values to their respective percentiles. To plot the &lt;span class="caps"&gt;CDF&lt;/span&gt; for a data distribution, we can use the convenient &lt;code&gt;stat_ecdf()&lt;/code&gt; function in &lt;span class="monospace"&gt;ggplot2&lt;/span&gt;.&lt;/p&gt;
&lt;ol start="3" class="example" type="1"&gt;
&lt;li&gt;&lt;p&gt;Visualize the &lt;span class="caps"&gt;CDF&lt;/span&gt; for both the unfiltered and filtered versions of the dataset. The code for plotting the &lt;span class="caps"&gt;CDF&lt;/span&gt; for the unfiltered dataset would&amp;nbsp;be:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;ggplot(data = newcomb) +
  stat_ecdf(mapping = aes(x = time)) +
  labs(y = &amp;quot;CDF&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;span class="caps"&gt;CDF&lt;/span&gt; for the filtered dataset can be visualized by slightly modifying the above code. Do you notice any changes in the &lt;span class="caps"&gt;CDF&lt;/span&gt; after removing the outliers from the original&amp;nbsp;dataset?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Finally, to wrap up this initial exploration, quantify these distributions by computing their summary statistics. The following functions in R are useful for computing the summary statistics of a&amp;nbsp;dataset:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;mean()&lt;/code&gt;: Computes the&amp;nbsp;average&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;median()&lt;/code&gt;: Computes the&amp;nbsp;median&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;min()&lt;/code&gt;: Finds the minimum&amp;nbsp;value&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;max()&lt;/code&gt;: Finds the maximum&amp;nbsp;value&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;sd()&lt;/code&gt;: Computes the standard&amp;nbsp;deviation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;IQR()&lt;/code&gt;: Computes the interquartile&amp;nbsp;range&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="4" class="example" type="1"&gt;
&lt;li&gt;&lt;p&gt;Calculate the following summary statistics for the filtered and unfiltered versions of the dataset: the mean, median, maximum, minimum, standard deviation, and the inter-quartile range (&lt;span class="caps"&gt;IQR&lt;/span&gt;). For the unfiltered dataset, this would&amp;nbsp;be:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;newcomb %&amp;gt;%
  summarize(
    mean = mean(time),
    median = median(time),
    sd = sd(time),
    iqr = IQR(time),
    min = min(time),
    max = max(time),
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which summary statistics are sensitive to removing the outliers? Which ones are&amp;nbsp;not?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="infering-a-trend"&gt;&lt;span class="monospace"&gt;infer&lt;/span&gt;ing a&amp;nbsp;trend&lt;/h2&gt;
&lt;p&gt;Because there is a spread in the time measurements in Newcomb’s dataset, the measured time should be reported as a mean value with error bars. The error bars are typically found by calculating a confidence interval. A typical choice is a 95% confidence interval, which can be estimated using computational simulations that &lt;em&gt;resample&lt;/em&gt; the dataset. To perform our statistical resampling, we will use the &lt;span class="monospace"&gt;tidyverse&lt;/span&gt;-inspired &lt;a href="https://github.com/andrewpbray/infer"&gt;&lt;span class="monospace"&gt;infer&lt;/span&gt; package&lt;/a&gt;, which will help us to compute confidence intervals and perform hypothesis&amp;nbsp;tests.&lt;/p&gt;
&lt;div class="callout primary"&gt;
&lt;p&gt;If not already installed, you can easily install &lt;code&gt;infer&lt;/code&gt; by running the following in your &lt;em&gt;Console&lt;/em&gt;&amp;nbsp;window:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;install.packages(&amp;quot;infer&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;To compute the confidence interval, we will need to generate the so-called &lt;em&gt;bootstrap distribution&lt;/em&gt;. We obtain the bootstrap simulation using the following&amp;nbsp;code:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;newcomb_bootstrap &amp;lt;- newcomb %&amp;gt;%
  specify(formula = time ~ NULL) %&amp;gt;%
  generate(reps = 10000, type = &amp;quot;bootstrap&amp;quot;) %&amp;gt;%
  calculate(stat = &amp;quot;mean&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To visualize the bootstrap distribution as a probability mass function, we&amp;nbsp;run:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;ggplot(newcomb_bootstrap) +
  geom_histogram(
    mapping = aes(x = stat, y = ..density..),
    binwidth = 0.1
  ) +
  labs(x = &amp;quot;average time&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What the bootstrap has done is sample &lt;em&gt;with replacement&lt;/em&gt; from the dataset distribution. The basic idea is that, if the underlying sample is representative, then we can sample directly from it &lt;em&gt;as if it were the true population&lt;/em&gt;. The number of samples we pull is equal to the number of observations in the dataset. After we resample the data, we complete the procedure by calculating the &lt;code&gt;mean&lt;/code&gt; of the simulated sample (or &lt;code&gt;median&lt;/code&gt;, &lt;code&gt;sd&lt;/code&gt;, or some other parameter), after which we then repeat the process multiple times until we end up with a distribution of means. We can then use the bootstrap sample to determine the confidence interval for the sample statistic of&amp;nbsp;interest.&lt;/p&gt;
&lt;p&gt;To construct the confidence interval, we need to “rank” the data in &lt;code&gt;stat&lt;/code&gt; from smallest to largest, which we can do with the &lt;code&gt;min_rank()&lt;/code&gt; function from &lt;span class="monospace"&gt;dplyr&lt;/span&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;newcomb_ci &amp;lt;- newcomb_bootstrap %&amp;gt;%
  mutate(rank = min_rank(stat)) %&amp;gt;%
  filter(between(rank, 0.025 * n(), 0.975 * n())) %&amp;gt;%
  summarize(
    lower_bound = min(stat),
    upper_bound = max(stat)
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To break down what is going on with the above set of&amp;nbsp;functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;min_rank(stat)&lt;/code&gt; is the stat column’s sorting order from smallest to&amp;nbsp;largest&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;0.025 * n()&lt;/code&gt; is the rank that defines the threshold for the 2.5th&amp;nbsp;percentile&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;0.975 * n()&lt;/code&gt; is the rank that defines the threshold for the 97.5th&amp;nbsp;percentile&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;min(stat)&lt;/code&gt; and &lt;code&gt;max(stat)&lt;/code&gt; gives thresholds for the 2.5th and 97.5th&amp;nbsp;percentiles&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="5" class="example" type="1"&gt;
&lt;li&gt;Using the above code, compute the 95% confidence interval for the unfiltered and filtered dataset using the bootstrap method. How does the confidence interval change when you exclude the outliers (the filtered&amp;nbsp;dataset)?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We can also use &lt;span class="monospace"&gt;infer&lt;/span&gt; to perform a two-sided hypothesis test. The code for doing this is relatively similar, we just need to add an additional &lt;code&gt;hypothesize()&lt;/code&gt; function. Of course, in order to run a hypothesis test we need some sort of hypothesis to test against, which will allow us to define the &lt;strong&gt;null distribution&lt;/strong&gt;. We also need to select a significance level &lt;span class="math inline"&gt;\(\alpha\)&lt;/span&gt;, which serves as a kind of evidence threshold that we use when determining whether or not we can reject the null hypothesis. A common choice for &lt;span class="math inline"&gt;\(\alpha\)&lt;/span&gt; is 0.05, which is the value that we will&amp;nbsp;use.&lt;/p&gt;
&lt;p&gt;Subsequent work on the speed of light has determined that, given the conditions of Newcomb’s setup, that this experiment should yield a “true” mean value of 33.02. With this value in hand, we can formalize the question of whether or not the gap separating our dataset’s distribution could have been generated by chance&amp;nbsp;alone.&lt;/p&gt;
&lt;ol start="6" class="example" type="1"&gt;
&lt;li&gt;Write down (in words) the &lt;strong&gt;null hypothesis&lt;/strong&gt; and the &lt;strong&gt;alternative hypothesis&lt;/strong&gt; for comparing this dataset against the “true” mean value of&amp;nbsp;33.02.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We modify our code as follows in order to generate the &lt;strong&gt;null distribution&lt;/strong&gt; needed to perform the hypothesis&amp;nbsp;test:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;newcomb_null &amp;lt;- newcomb %&amp;gt;%
  specify(formula = time ~ NULL) %&amp;gt;%
  hypothesize(null = &amp;quot;point&amp;quot;, mu = 33.02) %&amp;gt;%
  generate(reps = 10000, type = &amp;quot;bootstrap&amp;quot;) %&amp;gt;%
  calculate(stat = &amp;quot;mean&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have a null distribution, we can use it in combination with the experimental average for the speed of light to calculate the &lt;strong&gt;p-value&lt;/strong&gt;. The &lt;strong&gt;p-value&lt;/strong&gt; is simply the probability that, were we to repeat the experiment again, we would obtain a result that is the same &lt;strong&gt;or more extreme&lt;/strong&gt; than the reported experimental measurement. Put another way, we need to count the number of data points in the simulated null distribution that are the same or more extreme than the experimental measurement. Assuming that the average speed of light for the unfiltered dataset is assigned to the variable &lt;code&gt;average_light_speed&lt;/code&gt;, we would run the&amp;nbsp;following:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;point_estimate_difference &amp;lt;- abs(average_light_speed - 33.02)  # abs() computes absolute value
newcomb_null %&amp;gt;%
  filter(
    stat &amp;gt;= 33.02 + point_estimate_difference
    | stat &amp;lt;= 33.02 - point_estimate_difference
  ) %&amp;gt;%
  summarize(pvalue = n() / 10000)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the computed p-value is less than 0.05, our significance level, then we reject the null hypothesis in favor of the alternative&amp;nbsp;hypothesis.&lt;/p&gt;
&lt;ol start="7" class="example" type="1"&gt;
&lt;li&gt;Use the &lt;code&gt;infer&lt;/code&gt; package to run the two-sided hypothesis test with &lt;span class="math inline"&gt;\(\alpha = 0.05\)&lt;/span&gt; between the ideal value of 33.02 and unfiltered and filtered datasets. Can we reject the null hypothesis for either version (filtered or unfiltered) of the&amp;nbsp;dataset?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="additional-questions"&gt;Additional&amp;nbsp;questions&lt;/h2&gt;
&lt;div class="additional-questions"&gt;
&lt;ul&gt;
&lt;li&gt;From your analysis, does Newcomb’s dataset seem to agree with the “true” mean value of 33.02? Or is it inconsistent? Make reference to your confidence intervals of both the unfiltered and filtered datasets when answering these questions as well as your two-sided hypothesis test. Based on all this, how likely is it that a systematic bias exists within Newcomb’s&amp;nbsp;dataset?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="how-to-submit"&gt;How to&amp;nbsp;submit&lt;/h2&gt;
&lt;p&gt;When you are ready to submit, be sure to save, commit, and push your final result so that everything is synchronized to Github. Then, navigate to &lt;strong&gt;your copy&lt;/strong&gt; of the Github repository you used for this assignment. You should see your repository, along with the updated files that you just synchronized to Github. Confirm that your files are up-to-date, and then do the following&amp;nbsp;steps:&lt;/p&gt;
&lt;div class="pull-request"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Click the &lt;em&gt;Pull Requests&lt;/em&gt; tab near the top of the&amp;nbsp;page.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the green button that says “New pull&amp;nbsp;request”.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the dropdown menu button labeled “base:”, and select the option &lt;code&gt;starting&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Confirm that the dropdown menu button labeled “compare:” is set to &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the green button that says “Create pull&amp;nbsp;request”.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Give the &lt;em&gt;pull request&lt;/em&gt; the following title: &lt;span class="monospace"&gt;Submission: Lab 6, FirstName LastName&lt;/span&gt;, replacing &lt;span class="monospace"&gt;FirstName&lt;/span&gt; and &lt;span class="monospace"&gt;LastName&lt;/span&gt; with your actual first and last&amp;nbsp;name.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the messagebox, write: &lt;span class="monospace"&gt;My lab report is ready for grading @jkglasbrenner&lt;/span&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Click “Create pull request” to lock in your&amp;nbsp;submission.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="credits"&gt;Credits&lt;/h2&gt;
&lt;p&gt;This lab is licensed under a &lt;a href="http://creativecommons.org/licenses/by-sa/4.0/"&gt;Creative Commons Attribution-ShareAlike 4.0 International License&lt;/a&gt;. Exercises and instructions written by James Glasbrenner for &lt;span class="caps"&gt;CDS&lt;/span&gt;-102.&lt;/p&gt;
&lt;h2 id="references" class="unnumbered"&gt;References&lt;/h2&gt;
&lt;div id="refs" class="references"&gt;
&lt;div id="ref-stigler:robust"&gt;
&lt;p&gt;[1] &lt;span class="caps"&gt;S. M.&lt;/span&gt; Stigler, “Do Robust Estimators Work with &lt;span class="caps"&gt;REAL&lt;/span&gt; Data? (With Discussion),” Annals of Statistics &lt;strong&gt;5&lt;/strong&gt;, 1055&amp;nbsp;(1977).&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-Newcomb:1882"&gt;
&lt;p&gt;[2] S. Newcomb, “Measures of the Velocity of Light Made Under the Direction of the Secretary of the Navy During the Years 1880-’82,” Astronomical Papers &lt;strong&gt;3&lt;/strong&gt;, 107&amp;nbsp;(1882).&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-jaffe:1960"&gt;
&lt;p&gt;[3] B. Jaffe, &lt;em&gt;Michelson and the Speed of Light&lt;/em&gt; (Doubleday; Company, Garden City, New York,&amp;nbsp;1960).&lt;/p&gt;
&lt;/div&gt;
&lt;div id="ref-Carter:2002"&gt;
&lt;p&gt;[4] &lt;span class="caps"&gt;W. E.&lt;/span&gt; Carter and &lt;span class="caps"&gt;M. S.&lt;/span&gt; Carter, “The Newcomb-Michelson velocity of light experiments,” Eos, Transactions American Geophysical Union &lt;strong&gt;83&lt;/strong&gt;, 405&amp;nbsp;(2002).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="lab"></category></entry><entry><title>Mining the social web</title><link href="https://mason-su18-cds-102-2a1.github.io/labs/lab-05-mining-the-social-web/" rel="alternate"></link><published>2018-06-07T13:30:00-04:00</published><updated>2018-06-07T13:30:00-04:00</updated><author><name>Dr. Glasbrenner</name></author><id>tag:mason-su18-cds-102-2a1.github.io,2018-06-07:/labs/lab-05-mining-the-social-web/</id><summary type="html">Accessing the Twitter &lt;span class="caps"&gt;API&lt;/span&gt; using &lt;span style="monospace"&gt;rtweet&lt;/span&gt; and exploring what you can do with the harvested&amp;nbsp;data</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;This week’s lab shows you how to access the Twitter &lt;span class="caps"&gt;API&lt;/span&gt; using the &lt;span class="monospace"&gt;rtweet&lt;/span&gt; package and what you can do with that harvested&amp;nbsp;data.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="installing-dependencies"&gt;Installing&amp;nbsp;dependencies&lt;/h2&gt;
&lt;p&gt;This lab requires you to install a few extra packages into your RStudio environment, so let’s take care of that first. First, we need to check if we need to install the &lt;a href="https://github.com/r-lib/devtools"&gt;&lt;span class="monospace"&gt;devtools&lt;/span&gt;&lt;/a&gt; package, and install it if we don’t have&amp;nbsp;it:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;if (!requireNamespace(&amp;quot;devtools&amp;quot;, quietly = TRUE)) {
  install.packages(&amp;quot;devtools&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We also need to install the &lt;span class="monospace"&gt;fs&lt;/span&gt; package from the extended &lt;span class="monospace"&gt;tidyverse&lt;/span&gt; to help with constructing paths to files that are compatible with any operating&amp;nbsp;system:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;install.packages(&amp;quot;fs&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once &lt;a href="https://github.com/r-lib/devtools"&gt;&lt;span class="monospace"&gt;devtools&lt;/span&gt;&lt;/a&gt; and &lt;a href="https://github.com/r-lib/fs"&gt;&lt;span class="monospace"&gt;fs&lt;/span&gt;&lt;/a&gt; are installed, run the following code to install the latest version of the &lt;a href="https://github.com/mkearney/rtweet"&gt;&lt;span class="monospace"&gt;rtweet&lt;/span&gt;&lt;/a&gt;&amp;nbsp;package:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;devtools::install_github(&amp;quot;mkearney/rtweet&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We also run the following code in our &lt;em&gt;Console&lt;/em&gt; window in order to create an &lt;span class="monospace"&gt;.Renviron&lt;/span&gt; file and the folders where we will be saving our &lt;strong&gt;Twitter authentication token&lt;/strong&gt;.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;location_to_save_token &amp;lt;- fs::path(fs::path_home(), &amp;quot;.config&amp;quot;, &amp;quot;R&amp;quot;, &amp;quot;twitter&amp;quot;)
token_file &amp;lt;- fs::path(location_to_save_token, &amp;quot;twitter_token&amp;quot;, ext=&amp;quot;rds&amp;quot;)
fs::dir_create(path = location_to_save_token, recursive = TRUE)

renviron_file &amp;lt;- fs::path(fs::path_home(), &amp;quot;.Renviron&amp;quot;)
fs::file_create(path = renviron_file)
fs::file_chmod(path = renviron_file, mode = &amp;quot;600&amp;quot;)

if (!stringr::str_detect(readr::read_file(file = renviron_file), &amp;quot;TWITTER_APP=&amp;quot;)) {
  readr::write_file(
    x = glue::glue(
      &amp;quot;TWITTER_APP=rtweet_tokens\n&amp;quot;,
      &amp;quot;TWITTER_CONSUMER_KEY=\n&amp;quot;,
      &amp;quot;TWITTER_CONSUMER_SECRET=\n&amp;quot;,
      &amp;quot;TWITTER_ACCESS_TOKEN=\n&amp;quot;,
      &amp;quot;TWITTER_ACCESS_TOKEN_SECRET=\n\n&amp;quot;
    ),
    path = fs::path(fs::path_home(), &amp;quot;.Renviron&amp;quot;),
    append = TRUE
  )
}

if (!stringr::str_detect(readr::read_file(file = renviron_file), &amp;quot;TWITTER_PAT=&amp;quot;)) {
  readr::write_file(
    x = glue::glue(&amp;quot;TWITTER_PAT={token_file}\n\n&amp;quot;),
    path = fs::path(fs::path_home(), &amp;quot;.Renviron&amp;quot;),
    append = TRUE
  )
}

file.edit(renviron_file)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;span class="monospace"&gt;.Renviron&lt;/span&gt; file should have opened up in your editing pane. Leave it open for now, we will be adding information to it&amp;nbsp;shortly.&lt;/p&gt;
&lt;p&gt;Next, we turn to getting ourselves set up to access the Twitter &lt;span class="caps"&gt;API&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id="creating-an-app-on-the-twitter-api"&gt;Creating an App on the Twitter &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;The official method for accessing Twitter data is through their &lt;span class="caps"&gt;API&lt;/span&gt; — the acronym &lt;span class="caps"&gt;API&lt;/span&gt; means &lt;strong&gt;application programming interface&lt;/strong&gt; — that can only be used if you have an &lt;strong&gt;authentication token&lt;/strong&gt;. The procedure for obtaining an authentication token is straightforward, you just need to have a registered Twitter account. If you have not already, &lt;a href="https://twitter.com"&gt;create your Twitter account now&lt;/a&gt; and log into your&amp;nbsp;account.&lt;/p&gt;
&lt;div class="callout primary"&gt;
&lt;p&gt;&lt;strong&gt;Phone verification:&lt;/strong&gt; The Twitter apps page may require that you have a valid cell phone number associated with your Twitter account that is also &lt;strong&gt;verified&lt;/strong&gt;. To double check whether you’ve associated a phone number with your Twitter account and validated it, navigate to &lt;a href="https://twitter.com" class="uri"&gt;https://twitter.com&lt;/a&gt; and click on your profile picture in the top right hand corner, click &lt;code&gt;Settings and privacy&lt;/code&gt;, and then click &lt;code&gt;Mobile&lt;/code&gt; on the menubar on the left. On this page you can enter your cell phone number and then verify it by entering the code you receive in a text message from&amp;nbsp;Twitter.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The way we will get an authentication token for the Twitter &lt;span class="caps"&gt;API&lt;/span&gt; is by creating a Twitter app. Navigate to &lt;a href="https://apps.twitter.com" class="uri"&gt;https://apps.twitter.com&lt;/a&gt; and click &lt;strong&gt;Create New App&lt;/strong&gt;. This will open a page where you will create a new app by providing a Name, Description, and Website of your choosing, similar to the screenshot&amp;nbsp;below:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://mason-su18-cds-102-2a1.github.io/img/twitter_app_rtweet_token.png" title="plot of chunk creating-twitter-app-token" alt="plot of chunk creating-twitter-app-token" width="80%" style="display: block; margin: auto;" /&gt;&lt;/p&gt;
&lt;p&gt;In the input boxes where it asks you to provide a &lt;strong&gt;Name&lt;/strong&gt;, &lt;strong&gt;Description&lt;/strong&gt;, and &lt;strong&gt;Website&lt;/strong&gt;, use the&amp;nbsp;following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt; &lt;span class="monospace"&gt;cds-102-lab-&amp;lt;extra&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt; &lt;span class="monospace"&gt;&lt;span class="caps"&gt;CDS&lt;/span&gt; 102&amp;nbsp;lab&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Website:&lt;/strong&gt; &lt;span class="monospace"&gt;http&lt;!-- breaklink --&gt;://cds101.com&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Callback &lt;span class="caps"&gt;URL&lt;/span&gt;:&lt;/strong&gt; &lt;span class="monospace"&gt;http&lt;!-- breaklink --&gt;://127.0.0.1:1410&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;i class="fas fa-check-square"&gt;&lt;/i&gt; Yes, I have read and agree to the Twitter Developer&amp;nbsp;Agreement&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="callout primary"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In &lt;strong&gt;Name&lt;/strong&gt;, replace &lt;span class="monospace"&gt;&amp;lt;extra&amp;gt;&lt;/span&gt; with a sequence of letters or numbers of your&amp;nbsp;choosing&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The setting for &lt;strong&gt;Callback &lt;span class="caps"&gt;URL&lt;/span&gt;&lt;/strong&gt; is recommended by the &lt;a href="https://github.com/mkearney/rtweet"&gt;&lt;span class="monospace"&gt;rtweet&lt;/span&gt;&lt;/a&gt;&amp;nbsp;developers&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Check the box next to the &lt;strong&gt;Developer&amp;nbsp;Agreement&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Once you have filled in all the boxes in the way shown above, click on &lt;strong&gt;Create your Twitter Application&lt;/strong&gt;&amp;nbsp;button.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://mason-su18-cds-102-2a1.github.io/img/twitter_app_rtweet_created.png" title="plot of chunk twitter-app-token-created" alt="plot of chunk twitter-app-token-created" width="80%" style="display: block; margin: auto;" /&gt;&lt;/p&gt;
&lt;p&gt;After creating the app, click the tab labeled &lt;strong&gt;Keys and Access Tokens&lt;/strong&gt; to retrieve your consumer (api) and secret keys. The top of the page will look like&amp;nbsp;this:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://mason-su18-cds-102-2a1.github.io/img/twitter_app_token_keys.png" title="plot of chunk twitter-app-token-keys" alt="plot of chunk twitter-app-token-keys" width="80%" style="display: block; margin: auto;" /&gt;&lt;/p&gt;
&lt;p&gt;You will now need to copy and paste the codes for the &lt;strong&gt;Consumer Key&lt;/strong&gt;, &lt;strong&gt;Consumer Secret&lt;/strong&gt;, &lt;strong&gt;Access Token&lt;/strong&gt;, and &lt;strong&gt;Access Token Secret&lt;/strong&gt; into the &lt;span class="monospace"&gt;.Renviron&lt;/span&gt; file that we opened at the very end of the previous section. Copy each of these codes, match it to one of the four keywords in the &lt;span class="monospace"&gt;.Renviron&lt;/span&gt; file, and paste your copied code in the space immediately to the right of the equals &lt;span class="monospace"&gt;=&lt;/span&gt; sign. Then, in the RStudio menubar, click &lt;strong&gt;Session&lt;/strong&gt;, then click &lt;strong&gt;Restart R&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id="connecting-your-r-session-to-twitter"&gt;Connecting your R session to&amp;nbsp;Twitter&lt;/h2&gt;
&lt;p&gt;Now that we have the authentication token codes saved to our account, let’s connect R and &lt;span class="monospace"&gt;rtweet&lt;/span&gt; using the following&amp;nbsp;code:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;twitter_token &amp;lt;- rtweet::create_token(
  app = Sys.getenv(&amp;quot;TWITTER_APP&amp;quot;),
  consumer_key = Sys.getenv(&amp;quot;TWITTER_CONSUMER_KEY&amp;quot;),
  consumer_secret = Sys.getenv(&amp;quot;TWITTER_CONSUMER_SECRET&amp;quot;),
  access_token = Sys.getenv(&amp;quot;TWITTER_ACCESS_TOKEN&amp;quot;),
  access_secret = Sys.getenv(&amp;quot;TWITTER_ACCESS_TOKEN_SECRET&amp;quot;),
  set_renv = FALSE
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Running the above command will complete the connection process and now you can start using the Twitter &lt;span class="caps"&gt;API&lt;/span&gt;! Before we start, let’s perform one last configuration that will make it so that you do not need to re-run the above code each time you close and re-open&amp;nbsp;RStudio:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;location_to_save_token &amp;lt;- fs::path(fs::path_home(), &amp;quot;.config&amp;quot;, &amp;quot;R&amp;quot;, &amp;quot;twitter&amp;quot;)
token_file &amp;lt;- fs::path(location_to_save_token, &amp;quot;twitter_token&amp;quot;, ext=&amp;quot;rds&amp;quot;)
fs::dir_create(path = location_to_save_token, recursive = TRUE)
readr::write_rds(x = twitter_token, path = token_file)
fs::file_chmod(path = token_file, mode = &amp;quot;600&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code saves the configuration information about your Twitter authentication tokens and should be automatically loaded for you the next time you restart&amp;nbsp;RStudio.&lt;/p&gt;
&lt;div class="callout primary"&gt;
&lt;p&gt;&lt;strong&gt;Keep your access token codes private:&lt;/strong&gt; It may seem like it would be more convenient to just store the consumer key, consumer secret, access token, and access token secret directly inside your RMarkdown file. Do not do this! These codes will give &lt;em&gt;anyone&lt;/em&gt; that has them direct access to and control over your account. Therefore you should store the token codes somewhere safe in your RStudio Server account, which the above instructions helped you&amp;nbsp;accomplish.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="fetching-data-about-users-their-followers-and-friends"&gt;Fetching data about users, their followers, and&amp;nbsp;friends&lt;/h2&gt;
&lt;p&gt;There are many things we can analyze using a social media platform. Like most things, we will start small by stepping through a basic analysis of a single Twitter account. Our example account will be &lt;a href="https://twitter.com/CSS_GMU"&gt;&lt;span class="monospace"&gt;@CSS_GMU&lt;/span&gt;&lt;/a&gt;, which is the official Twitter account of the Computational Social Science program in George Mason’s Computational &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Data Sciences&amp;nbsp;Department.&lt;/p&gt;
&lt;p&gt;We begin by fetching the basic account information for &lt;a href="https://twitter.com/CSS_GMU"&gt;&lt;span class="monospace"&gt;@CSS_GMU&lt;/span&gt;&lt;/a&gt;, which we will then save to disk for offline access, and then explore the variables returned to us. To ask the Twitter &lt;span class="caps"&gt;API&lt;/span&gt; for the account information belonging to the Computational Social Science program, we&amp;nbsp;use:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;lookup_users(&amp;quot;CSS_GMU&amp;quot;) %&amp;gt;%
  write_rds(path = path(&amp;quot;user_css_gmu&amp;quot;, ext = &amp;quot;rds&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will write a file named &lt;span class="monospace"&gt;user_css_gmu.rds&lt;/span&gt; into your project directory that contains the information we just collected. To read it into R’s memory, we&amp;nbsp;run:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;user_css_gmu &amp;lt;- read_rds(&amp;quot;user_css_gmu.rds&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let’s take a look at the information we just gathered about &lt;a href="https://twitter.com/CSS_GMU"&gt;&lt;span class="monospace"&gt;@CSS_GMU&lt;/span&gt;&lt;/a&gt;. Perhaps we can learn something about the account just by looking at the different variables. Run the following to get a full list of the variables you can look at that are related to the&amp;nbsp;account:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;user_css_gmu %&amp;gt;%
  users_data() %&amp;gt;%
  names()&lt;/code&gt;&lt;/pre&gt;
&lt;ol class="example" type="1"&gt;
&lt;li&gt;&lt;p&gt;Let’s focus on the following variables associated with the &lt;a href="https://twitter.com/CSS_GMU"&gt;&lt;span class="monospace"&gt;@CSS_GMU&lt;/span&gt;&lt;/a&gt;&amp;nbsp;account:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;user_css_gmu %&amp;gt;%
  users_data() %&amp;gt;%
  select(
    account_created_at,
    description,
    favourites_count,
    followers_count,
    friends_count,
    account_lang
  ) %&amp;gt;%
  glimpse(width = 200)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What do these variables describe and why might they be interesting to know? What other variables do you see after running the &lt;code&gt;names()&lt;/code&gt; function that would be of interest to a data&amp;nbsp;scientist?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;On social media platforms such as Twitter, we can learn a lot about an individual user by looking at the people that user follows (we’ll call these &lt;em&gt;friends&lt;/em&gt;) as well as the people that follow the user (we’ll call these &lt;em&gt;followers&lt;/em&gt;), and by studying the attributes and behaviors that emerge when these users interact with one another. Thus, while knowing an account’s personal attributes can be very useful, we can infer additional information about a user by analyzing the account’s friends and followers. Let’s see how this works in&amp;nbsp;practice.&lt;/p&gt;
&lt;ol start="2" class="example" type="1"&gt;
&lt;li&gt;&lt;p&gt;We need to fetch the friends and followers of the &lt;a href="https://twitter.com/CSS_GMU"&gt;&lt;span class="monospace"&gt;@CSS_GMU&lt;/span&gt;&lt;/a&gt; account using the &lt;code&gt;get_followers()&lt;/code&gt; and &lt;code&gt;get_friends()&lt;/code&gt; functions from &lt;span class="monospace"&gt;rtweet&lt;/span&gt; as&amp;nbsp;follows:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;get_followers(&amp;quot;CSS_GMU&amp;quot;) %&amp;gt;%
  pull(user_id) %&amp;gt;%
  lookup_users() %&amp;gt;%
  write_rds(path = path(&amp;quot;css_gmu_followers&amp;quot;, ext = &amp;quot;rds&amp;quot;))

get_friends(&amp;quot;CSS_GMU&amp;quot;) %&amp;gt;%
  pull(user_id) %&amp;gt;%
  lookup_users() %&amp;gt;%
  write_rds(path = path(&amp;quot;css_gmu_friends&amp;quot;, ext = &amp;quot;rds&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Like before, we’ve saved the data we collected to disk so that we have an offline&amp;nbsp;copy.&lt;/p&gt;
&lt;p&gt;Do you understand what the above code is actually doing? Figure out what &lt;code&gt;get_followers()&lt;/code&gt; and &lt;code&gt;get_friends()&lt;/code&gt; are doing specifically, and what the &lt;code&gt;lookup_users()&lt;/code&gt; function is doing in the above code, and explain it. Then, write the code that you need to read the &lt;span class="monospace"&gt;rds&lt;/span&gt; files into R so that you can work with the data. Assign the followers data to the variable &lt;code&gt;css_gmu_followers&lt;/code&gt; and the friends data to the variable &lt;code&gt;css_gmu_friends&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="visualizing-twitter-data"&gt;Visualizing Twitter&amp;nbsp;data&lt;/h2&gt;
&lt;p&gt;One of the conveniences of the &lt;span class="monospace"&gt;rtweet&lt;/span&gt; package is that it stores Twitter data in the &lt;span class="monospace"&gt;tibble&lt;/span&gt; data frame format, so all of the &lt;span class="monospace"&gt;tidyverse&lt;/span&gt; tools we’ve learned to use so far can be used for analysis. Let’s work through a few examples of what you can do to analyze this&amp;nbsp;data.&lt;/p&gt;
&lt;p&gt;One of the questions we can ask of our data is if there is a relationship between how often &lt;a href="https://twitter.com/CSS_GMU"&gt;&lt;span class="monospace"&gt;@CSS_GMU&lt;/span&gt;&lt;/a&gt;’s followers tweet and the number of followers they have. While we’re at it, we can also ask: what language do they write their tweets&amp;nbsp;in?&lt;/p&gt;
&lt;ol start="3" class="example" type="1"&gt;
&lt;li&gt;&lt;p&gt;Use the following command to get an answer to these&amp;nbsp;questions:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;css_gmu_followers %&amp;gt;%
  users_data() %&amp;gt;%
  ggplot() +
  geom_point(
    mapping = aes(
      x = statuses_count,
      y = followers_count,
      color = account_lang
    )
  ) +
  scale_x_log10() +
  scale_y_log10() +
  coord_equal()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that we have set our plot to have a log-scale on both axes. Why would we want to do that? Also, what does this graph tell us about the accounts that follow &lt;a href="https://twitter.com/CSS_GMU"&gt;&lt;span class="monospace"&gt;@CSS_GMU&lt;/span&gt;&lt;/a&gt;, and by consequence, what does all this say about &lt;a href="https://twitter.com/CSS_GMU"&gt;&lt;span class="monospace"&gt;@CSS_GMU&lt;/span&gt;&lt;/a&gt;?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The ages of the accounts for &lt;a href="https://twitter.com/CSS_GMU"&gt;&lt;span class="monospace"&gt;@CSS_GMU&lt;/span&gt;&lt;/a&gt;’s friends and followers could contain meaningful patterns and be of interest to us. For example, it may be that the patterns in the account ages for &lt;a href="https://twitter.com/CSS_GMU"&gt;&lt;span class="monospace"&gt;@CSS_GMU&lt;/span&gt;&lt;/a&gt; look different from accounts not associated with a&amp;nbsp;University.&lt;/p&gt;
&lt;ol start="4" class="example" type="1"&gt;
&lt;li&gt;&lt;p&gt;Use the following command to create a visualization that looks at the account creation date for followers of &lt;a href="https://twitter.com/CSS_GMU"&gt;&lt;span class="monospace"&gt;@CSS_GMU&lt;/span&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;css_gmu_followers %&amp;gt;%
  users_data() %&amp;gt;%
  ggplot() +
  geom_histogram(
    mapping = aes(x = account_created_at),
    bins = 20
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Describe the distribution of ages of the accounts that follow &lt;a href="https://twitter.com/CSS_GMU"&gt;&lt;span class="monospace"&gt;@CSS_GMU&lt;/span&gt;&lt;/a&gt;, and what can we infer about the account &lt;a href="https://twitter.com/CSS_GMU"&gt;&lt;span class="monospace"&gt;@CSS_GMU&lt;/span&gt;&lt;/a&gt;&amp;nbsp;itself?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Of course, it wouldn’t make sense for us to interact with the Twitter &lt;span class="caps"&gt;API&lt;/span&gt; if we don’t grab some actual tweets! To request tweets for a specific account, we use the &lt;code&gt;get_timeline()&lt;/code&gt; function. For example, to request all the tweets by the &lt;a href="https://twitter.com/CSS_GMU"&gt;&lt;span class="monospace"&gt;@CSS_GMU&lt;/span&gt;&lt;/a&gt; account we use the following&amp;nbsp;command:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;get_timeline(user = &amp;quot;CSS_GMU&amp;quot;, n = 500) %&amp;gt;%
  write_rds(path = path(&amp;quot;css_gmu_all_tweets&amp;quot;, ext = &amp;quot;rds&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As usual, we save the tweets to disk so that we have an offline copy. After saving them, we load the tweets and assign them to the variable &lt;code&gt;css_gmu_tweets&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;css_gmu_tweets &amp;lt;- read_rds(&amp;quot;css_gmu_all_tweets.rds&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="5" class="example" type="1"&gt;
&lt;li&gt;&lt;p&gt;Create a timeline plot of &lt;a href="https://twitter.com/CSS_GMU"&gt;&lt;span class="monospace"&gt;@CSS_GMU&lt;/span&gt;&lt;/a&gt;’s monthly tweeting frequency since the account was first created using the following&amp;nbsp;code:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;css_gmu_tweets %&amp;gt;%
  tweets_data() %&amp;gt;%
  ts_plot(by = &amp;quot;months&amp;quot;) +
  theme(plot.title = element_text(face = &amp;quot;bold&amp;quot;)) +
  labs(
    x = NULL,
    y = NULL,
    title = &amp;quot;Frequency of @CSS_GMU Twitter statuses since account creation&amp;quot;,
    subtitle = &amp;quot;Twitter status (tweet) counts aggregated using one-month intervals&amp;quot;,
    caption = &amp;quot;\nSource: Data collected from Twitter&amp;#39;s REST API via rtweet&amp;quot;
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You’ll notice that there’s a cyclical pattern to the tweet frequency for this account. Explain why this might be happening by suggesting a reasonable hypothesis for the mechanism behind this cyclic&amp;nbsp;behavior.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="choose-your-own-adventure"&gt;Choose your own&amp;nbsp;adventure&lt;/h2&gt;
&lt;p&gt;Now it’s your turn to tell a story. Pick a Twitter account, any account, and explore it using the tools that were just introduced to you. Your exploratory analysis should be encapsulated in no less than 4 – 6 separate plots, which you will then interpret and weave into a coherent narrative about your chosen account. This is an open-ended lab report, so go ahead and have some fun with&amp;nbsp;it!&lt;/p&gt;
&lt;div class="callout primary"&gt;
&lt;p&gt;&lt;strong&gt;The grading will be heavily weighted towards this section and what you submit for this part of the&amp;nbsp;lab.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="callout secondary"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;While your story should start with one Twitter account, you are welcome to branch outward by looking at the attributes of the account’s friends and followers to enrich and extend your&amp;nbsp;analysis.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;You are welcome to use any of the available functions in &lt;span class="monospace"&gt;rtweet&lt;/span&gt;, even if they weren’t shown in the&amp;nbsp;exercises.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="how-to-submit"&gt;How to&amp;nbsp;submit&lt;/h2&gt;
&lt;p&gt;When you are ready to submit, be sure to save, commit, and push your final result so that everything is synchronized to Github. Then, navigate to &lt;strong&gt;your copy&lt;/strong&gt; of the Github repository you used for this assignment. You should see your repository, along with the updated files that you just synchronized to Github. Confirm that your files are up-to-date, and then do the following&amp;nbsp;steps:&lt;/p&gt;
&lt;div class="pull-request"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Click the &lt;em&gt;Pull Requests&lt;/em&gt; tab near the top of the&amp;nbsp;page.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the green button that says “New pull&amp;nbsp;request”.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the dropdown menu button labeled “base:”, and select the option &lt;code&gt;starting&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Confirm that the dropdown menu button labeled “compare:” is set to &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the green button that says “Create pull&amp;nbsp;request”.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Give the &lt;em&gt;pull request&lt;/em&gt; the following title: &lt;span class="monospace"&gt;Submission: Lab 5, FirstName LastName&lt;/span&gt;, replacing &lt;span class="monospace"&gt;FirstName&lt;/span&gt; and &lt;span class="monospace"&gt;LastName&lt;/span&gt; with your actual first and last&amp;nbsp;name.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the messagebox, write: &lt;span class="monospace"&gt;My lab report is ready for grading @jkglasbrenner&lt;/span&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Click “Create pull request” to lock in your&amp;nbsp;submission.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="credits"&gt;Credits&lt;/h2&gt;
&lt;p&gt;This lab is licensed under a &lt;a href="http://creativecommons.org/licenses/by-sa/4.0/"&gt;Creative Commons Attribution-ShareAlike 4.0 International License&lt;/a&gt;. Lab instructions and exercises originally created by Joe Shaheen for &lt;span class="caps"&gt;CDS&lt;/span&gt;-102. Updates to exercises and instructions for compatibility with the &lt;a href="https://github.com/mkearney/rtweet"&gt;&lt;span class="monospace"&gt;rtweet&lt;/span&gt;&lt;/a&gt; package by James Glasbrenner. Figures in the &lt;a href="#creating-an-app-on-the-twitter-api"&gt;Creating an App on the Twitter &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt; section are from the &lt;a href="#rtweet-obtaining-access-tokens"&gt;&lt;em&gt;Obtaining and using access tokens&lt;/em&gt;&lt;/a&gt; &lt;span class="monospace"&gt;rtweet&lt;/span&gt;&amp;nbsp;vignette.&lt;/p&gt;
</content><category term="lab"></category></entry><entry><title>Tidying your dataset</title><link href="https://mason-su18-cds-102-2a1.github.io/labs/lab-04-tidying-your-dataset/" rel="alternate"></link><published>2018-06-05T13:30:00-04:00</published><updated>2018-06-05T13:30:00-04:00</updated><author><name>Dr. Glasbrenner</name></author><id>tag:mason-su18-cds-102-2a1.github.io,2018-06-05:/labs/lab-04-tidying-your-dataset/</id><summary type="html">Use &lt;span style="monospace"&gt;tidyr&lt;/span&gt; to reshape genetics data to make it&amp;nbsp;&amp;#8220;tidy&amp;#8221;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;This week’s lab will introduce you to the concepts of tidy data and how you can reshape your dataset to take advantage of the &lt;span class="monospace"&gt;tidyverse&lt;/span&gt; tools. You will then be guided through the process of using these tools to reshape a real-world gene expression dataset that tested the effect of starvation and growth rate on baker’s yeast.&lt;a href="#fn1" class="footnote-ref" id="fnref1"&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="tidy-data"&gt;Tidy&amp;nbsp;data&lt;/h2&gt;
&lt;p&gt;The principles of &lt;em&gt;Tidy Data&lt;/em&gt; are visually represented in the figure&amp;nbsp;below:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://mason-su18-cds-102-2a1.github.io/img/tidy_data_schematic.png" title="plot of chunk tidy-data-schematic" alt="plot of chunk tidy-data-schematic" width="80%" style="display: block; margin: auto;" /&gt;&lt;/p&gt;
&lt;p&gt;The three panels are an illustration of the following three&amp;nbsp;rules,&lt;/p&gt;
&lt;div class="additional-questions"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Each variable must have its own&amp;nbsp;column.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Each observation must have its own&amp;nbsp;row.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Each value must have its own&amp;nbsp;cell.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;It is worth emphasizing that there is a difference between a &lt;strong&gt;tidy&lt;/strong&gt; dataset and a &lt;strong&gt;dirty&lt;/strong&gt; dataset. “Tidying” a dataset means reshaping it by transposing the rows and columns until the format matches the criteria outlined in the above rules, which then allows us to more easily use the &lt;span class="monospace"&gt;ggplot2&lt;/span&gt; and &lt;span class="monospace"&gt;dplyr&lt;/span&gt; functions to analyze and visualize a dataset. Cleaning a “dirty” dataset means that you are fixing misspellings, data entry errors, and dealing with other irregularities in the raw&amp;nbsp;data.&lt;/p&gt;
&lt;h2 id="about-this-weeks-dataset"&gt;About this week’s&amp;nbsp;dataset&lt;/h2&gt;
&lt;p&gt;The following quote, taken from a discussion about this paper&lt;a href="#fn2" class="footnote-ref" id="fnref2"&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;, describes the meaning of this dataset pretty&amp;nbsp;well:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Through the process of gene regulation, a cell can control which genes are transcribed from &lt;span class="caps"&gt;DNA&lt;/span&gt; to &lt;span class="caps"&gt;RNA&lt;/span&gt; — what we call being “expressed”. (If a gene is never turned into &lt;span class="caps"&gt;RNA&lt;/span&gt;, it may as well not be there at all). This provides a sort of “cellular switchboard” that can activate some systems and deactivate others, which can speed up or slow down growth, switch what nutrients are transported into or out of the cell, and respond to other stimuli. A &lt;a href="https://en.wikipedia.org/wiki/DNA_microarray"&gt;gene expression microarray&lt;/a&gt; lets us measure how much of each gene is expressed in a particular condition. We can use this to figure out the function of a specific gene (based on when it turns on and off), or to get an overall picture of the cell’s&amp;nbsp;activity.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.molbiolcell.org/content/19/1/352.abstract"&gt;Brauer 2008&lt;/a&gt; used microarrays to test the effect of starvation and growth rate on baker’s yeast &lt;a href="https://en.wikipedia.org/wiki/Saccharomyces_cerevisiae"&gt;S. cerevisiae&lt;/a&gt;, a popular model organism for studying molecular genomics because of its simplicity). Basically, if you give yeast plenty of nutrients (a rich media), except that you sharply restrict its supply of one nutrient, you can control the growth rate to whatever level you desire (we do this with a tool called a &lt;a href="https://en.wikipedia.org/wiki/Chemostat"&gt;chemostat&lt;/a&gt;). For example, you could limit the yeast’s supply of glucose (sugar, which the cell metabolizes to get energy and carbon), of leucine (an essential amino acid), or of ammonium (a source of&amp;nbsp;nitrogen).&lt;/p&gt;
&lt;p&gt;“Starving” the yeast of these nutrients lets us find genes&amp;nbsp;that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Raise or lower their activity in response to growth rate&lt;/strong&gt;. Growth-rate dependent expression patterns can tell us a lot about cell cycle control, and how the cell responds to&amp;nbsp;stress.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Respond differently when different nutrients are being limited&lt;/strong&gt;. These genes may be involved in the transport or metabolism of those&amp;nbsp;nutrients.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id="variables"&gt;Variables&lt;/h3&gt;
&lt;p&gt;This is a tabular dataset with 5,537 rows and 40&amp;nbsp;columns:&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style="width: 17%" /&gt;
&lt;col style="width: 82%" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th&gt;Variable&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;&lt;span class="monospace"&gt;&lt;span class="caps"&gt;GID&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;One kind of &lt;span class="caps"&gt;ID&lt;/span&gt; for each gene&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;&lt;span class="monospace"&gt;&lt;span class="caps"&gt;YORF&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Yeast Open Reading Frame (a kind of sub-unit of genetic information)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;&lt;span class="monospace"&gt;&lt;span class="caps"&gt;NAME&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;See below&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;&lt;span class="monospace"&gt;&lt;span class="caps"&gt;GWEIGHT&lt;/span&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;The paper doesn’t make this clear, but all entries are 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;&lt;span class="monospace"&gt;[&lt;span class="caps"&gt;GNP&lt;/span&gt;][0.05 ≤ x ≤ 0.30]&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;The letters &lt;span class="monospace"&gt;G&lt;/span&gt;, &lt;span class="monospace"&gt;N&lt;/span&gt;, and &lt;span class="monospace"&gt;P&lt;/span&gt; represent the restricted nutrient. The decimal value is the yeast growth rate.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The &lt;code&gt;NAME&lt;/code&gt; column contains the following information separated by the double bar &lt;span class="monospace"&gt;||&lt;/span&gt;&amp;nbsp;symbols:&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style="width: 25%" /&gt;
&lt;col style="width: 74%" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th&gt;Variable&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;Gene name&lt;/td&gt;
&lt;td&gt;for example, &lt;span class="caps"&gt;SFB2&lt;/span&gt;. Not all genes have a name here.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;Biological process&lt;/td&gt;
&lt;td&gt;for example, “proteolysis and peptidolysis”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;Molecular function&lt;/td&gt;
&lt;td&gt;for example, “metalloendopeptidase activity”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;Systematic &lt;span class="caps"&gt;ID&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;for example, &lt;span class="caps"&gt;YNL049C&lt;/span&gt;. Every gene has one of these unique IDs.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;Unknown &lt;span class="caps"&gt;ID&lt;/span&gt; Number&lt;/td&gt;
&lt;td&gt;for example, 1082129. The paper doesn’t explain what these mean.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="callout secondary"&gt;
&lt;p&gt;Like in previous labs, it’s recommended that you take a first look at the dataset by viewing it by running &lt;code&gt;View(brauer)&lt;/code&gt; in your &lt;em&gt;Console&lt;/em&gt;&amp;nbsp;window.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="the-tidyr-package"&gt;The &lt;span class="monospace"&gt;tidyr&lt;/span&gt;&amp;nbsp;package&lt;/h2&gt;
&lt;p&gt;Reshaping the gene expression dataset will require us to use two functions found in the &lt;span class="monospace"&gt;tidyr&lt;/span&gt; package, &lt;code&gt;gather()&lt;/code&gt; and &lt;code&gt;separate()&lt;/code&gt;. Let’s review how each of these functions works with the extended example from Chapter 12.6 in the &lt;a href="http://r4ds.had.co.nz/"&gt;&lt;em&gt;R for Data Science&lt;/em&gt;&lt;/a&gt;&amp;nbsp;textbook.&lt;/p&gt;
&lt;p&gt;Running the &lt;code&gt;library(tidyverse)&lt;/code&gt; command at the top of our RMarkdown file loads many packages and example datasets for us, which includes a dataset from the World Health Organization that is stored in the variable &lt;code&gt;who&lt;/code&gt;. The first few lines of the &lt;code&gt;who&lt;/code&gt; dataset&amp;nbsp;are:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align:left;"&gt;
country
&lt;/th&gt;
&lt;th style="text-align:left;"&gt;
iso2
&lt;/th&gt;
&lt;th style="text-align:left;"&gt;
iso3
&lt;/th&gt;
&lt;th style="text-align:left;"&gt;
year
&lt;/th&gt;
&lt;th style="text-align:left;"&gt;
new_sp_m014
&lt;/th&gt;
&lt;th style="text-align:left;"&gt;
new_sp_m1524
&lt;/th&gt;
&lt;th style="text-align:left;"&gt;
new_sp_m2534
&lt;/th&gt;
&lt;th style="text-align:left;"&gt;
new_sp_m3544
&lt;/th&gt;
&lt;th style="text-align:left;"&gt;
new_sp_m4554
&lt;/th&gt;
&lt;th style="text-align:left;"&gt;
…
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align:left;"&gt;
Afghanistan
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;AF&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;AFG&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
1980
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;NA&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;NA&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;NA&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;NA&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;NA&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
…
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left;"&gt;
Afghanistan
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;AF&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;AFG&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
1981
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;NA&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;NA&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;NA&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;NA&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;NA&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
…
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left;"&gt;
Afghanistan
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;AF&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;AFG&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
1982
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;NA&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;NA&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;NA&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;NA&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;NA&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
…
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left;"&gt;
Afghanistan
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;AF&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;AFG&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
1983
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;NA&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;NA&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;NA&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;NA&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;NA&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
…
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left;"&gt;
Afghanistan
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;AF&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;AFG&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
1984
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;NA&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;NA&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;NA&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;NA&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;NA&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
…
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left;"&gt;
Afghanistan
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;AF&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;AFG&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
1985
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;NA&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;NA&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;NA&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;NA&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;NA&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
…
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left;"&gt;
…
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
…
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
…
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
…
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
…
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
…
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
…
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
…
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
…
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
…
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="using-gather-to-transpose-columns-into-rows"&gt;Using &lt;code&gt;gather()&lt;/code&gt; to transpose columns into&amp;nbsp;rows&lt;/h3&gt;
&lt;p&gt;In this data frame, the names of the 57 columns starting with &lt;code&gt;new_sp_m014&lt;/code&gt; and ending with &lt;code&gt;newrel_f65&lt;/code&gt; each refer to a set of three categories, violating the first rule for tidy data. This can easily be fixed by transposing these columns into rows using the &lt;code&gt;gather()&lt;/code&gt; command:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;who1 &amp;lt;- who %&amp;gt;% 
  gather(new_sp_m014:newrel_f65, key = &amp;quot;key&amp;quot;, value = &amp;quot;cases&amp;quot;, na.rm = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After applying the &lt;code&gt;gather()&lt;/code&gt; operation, the first few rows in the dataset now look as&amp;nbsp;follows:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align:left;"&gt;
country
&lt;/th&gt;
&lt;th style="text-align:left;"&gt;
iso2
&lt;/th&gt;
&lt;th style="text-align:left;"&gt;
iso3
&lt;/th&gt;
&lt;th style="text-align:left;"&gt;
year
&lt;/th&gt;
&lt;th style="text-align:left;"&gt;
key
&lt;/th&gt;
&lt;th style="text-align:left;"&gt;
cases
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align:left;"&gt;
Afghanistan
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;AF&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;AFG&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
1997
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
new_sp_m014
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left;"&gt;
Afghanistan
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;AF&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;AFG&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
1998
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
new_sp_m014
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
30
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left;"&gt;
Afghanistan
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;AF&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;AFG&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
1999
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
new_sp_m014
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
8
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left;"&gt;
Afghanistan
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;AF&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;AFG&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
2000
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
new_sp_m014
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
52
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left;"&gt;
Afghanistan
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;AF&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;AFG&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
2001
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
new_sp_m014
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
129
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left;"&gt;
Afghanistan
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;AF&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;AFG&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
2002
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
new_sp_m014
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
90
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left;"&gt;
…
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
…
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
…
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
…
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
…
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
…
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As you can see, we’ve taken the 57 category columnms and converted them into categories underneath a single column named &lt;code&gt;key&lt;/code&gt; with their corresponding values placed underneath the column &lt;code&gt;cases&lt;/code&gt;.&lt;/p&gt;
&lt;div class="callout primary"&gt;
&lt;p&gt;To summarize, the syntax for &lt;code&gt;gather()&lt;/code&gt; is as&amp;nbsp;follows:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;dataset %&amp;gt;%
  gather(
    ...,           #  Columns you want to gather into rows
    key = &amp;quot;...&amp;quot;,   #  Variable for storing names of gathered columns
    value = &amp;quot;...&amp;quot;  #  Variable for values stored under gathered columns
  )&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id="using-separate-to-split-one-column-into-many"&gt;Using &lt;code&gt;separate()&lt;/code&gt; to split one column into&amp;nbsp;many&lt;/h3&gt;
&lt;p&gt;The other function you will need to use is &lt;code&gt;separate()&lt;/code&gt;. This function takes values in a single column and splits them out into multiple columns. This is used when you have a dataset that doesn’t follow the third rule of tidy&amp;nbsp;data.&lt;/p&gt;
&lt;p&gt;Going back to the &lt;code&gt;who&lt;/code&gt; example, after you gathered the 57 columns into a single column, we might wonder what the values under &lt;code&gt;key&lt;/code&gt; mean. If you run &lt;code&gt;?who&lt;/code&gt;, you’ll see that the underscores &lt;code&gt;_&lt;/code&gt; separate different variable values. This means that the &lt;code&gt;key&lt;/code&gt; column contains 3 values per cell, not one, so this is a case for using &lt;code&gt;separate()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To separate the columns, we run the&amp;nbsp;following:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;who2 &amp;lt;- who1 %&amp;gt;%
  mutate(key = str_replace(key, &amp;quot;newrel&amp;quot;, &amp;quot;new_rel&amp;quot;)) %&amp;gt;%
  separate(
    col = key,
    into = combine(&amp;quot;new&amp;quot;, &amp;quot;type&amp;quot;, &amp;quot;sexage&amp;quot;),
    sep = &amp;quot;_&amp;quot;
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can ignore the second line with a &lt;code&gt;mutate()&lt;/code&gt; command for now, as this just fixes the missing underscore that you need to do before running&amp;nbsp;separate.&lt;/p&gt;
&lt;p&gt;The first few lines of the separated dataset&amp;nbsp;are:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align:left;"&gt;
country
&lt;/th&gt;
&lt;th style="text-align:left;"&gt;
iso2
&lt;/th&gt;
&lt;th style="text-align:left;"&gt;
iso3
&lt;/th&gt;
&lt;th style="text-align:left;"&gt;
year
&lt;/th&gt;
&lt;th style="text-align:left;"&gt;
new
&lt;/th&gt;
&lt;th style="text-align:left;"&gt;
type
&lt;/th&gt;
&lt;th style="text-align:left;"&gt;
sexage
&lt;/th&gt;
&lt;th style="text-align:left;"&gt;
cases
&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align:left;"&gt;
Afghanistan
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;AF&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;AFG&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
1997
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
new
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
sp
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
m014
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
0
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left;"&gt;
Afghanistan
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;AF&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;AFG&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
1998
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
new
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
sp
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
m014
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
30
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left;"&gt;
Afghanistan
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;AF&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;AFG&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
1999
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
new
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
sp
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
m014
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
8
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left;"&gt;
Afghanistan
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;AF&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;AFG&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
2000
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
new
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
sp
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
m014
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
52
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left;"&gt;
Afghanistan
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;AF&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;AFG&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
2001
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
new
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
sp
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
m014
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
129
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left;"&gt;
Afghanistan
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;AF&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
&lt;span class="caps"&gt;AFG&lt;/span&gt;
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
2002
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
new
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
sp
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
m014
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
90
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left;"&gt;
…
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
…
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
…
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
…
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
…
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
…
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
…
&lt;/td&gt;
&lt;td style="text-align:left;"&gt;
…
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As you can see, this has successfully split our one column into&amp;nbsp;three.&lt;/p&gt;
&lt;div class="callout primary"&gt;
&lt;p&gt;To summarize, the syntax for &lt;code&gt;separate()&lt;/code&gt; is as&amp;nbsp;follows:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;dataset %&amp;gt;%
  separate(
    col = ...,            #  Name of column to separate
    into = combine(...),  #  Names for new columns formed after separation
    sep = ...,            #  Specifies the separator symbols
    convert = ...         #  If TRUE, tries to set data type for new columns
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Your should note that the &lt;code&gt;into&lt;/code&gt; keyword needs to be specified as a vector of strings that you can create using &lt;code&gt;combine()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="prune-the-dataset"&gt;Prune the&amp;nbsp;dataset&lt;/h2&gt;
&lt;p&gt;When dealing with larger datasets that have many columns, it is helpful if you can identify any columns that are extraneous and will not be used for analysis. This shrinks the overall size of the dataset so that it takes up less space in the computer’s memory. For this dataset, the &lt;code&gt;GID&lt;/code&gt;, &lt;code&gt;YORF&lt;/code&gt;, and &lt;code&gt;GWEIGHT&lt;/code&gt; columns aren’t particularly important for any kind of analysis, so they can be&amp;nbsp;removed.&lt;/p&gt;
&lt;ol class="example" type="1"&gt;
&lt;li&gt;Remove the &lt;code&gt;GID&lt;/code&gt;, &lt;code&gt;YORF&lt;/code&gt;, and &lt;code&gt;GWEIGHT&lt;/code&gt; variables from the dataset and assign the result to the variable &lt;code&gt;brauer2&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="enforcing-one-observation-per-row"&gt;Enforcing one observation per&amp;nbsp;row&lt;/h2&gt;
&lt;p&gt;Now we will employ a systematic approach while tidying this dataset by going through the rules one by one and determining what (if anything) needs to be reshaped. We start with the first rule that “each variable must have its own column.” The columns &lt;code&gt;G0.05&lt;/code&gt; through &lt;code&gt;U0.3&lt;/code&gt; each contain the results of different experimental trials, telling us which nutrient was restricted and what growth rate was selected for the yeast. Knowing this, we conclude that this dataset violates the first rule, as each row contains multiple experimental&amp;nbsp;trials.&lt;/p&gt;
&lt;ol start="2" class="example" type="1"&gt;
&lt;li&gt;Use &lt;code&gt;gather()&lt;/code&gt; to transpose the columns &lt;code&gt;G0.05&lt;/code&gt; through &lt;code&gt;U0.3&lt;/code&gt; into a series of rows to satisfy the rule that &amp;#8220;each variable must have its own column. Use the label &lt;code&gt;sample&lt;/code&gt; for the new categorical variable created by &lt;code&gt;gather()&lt;/code&gt; that contains the gathered column names and use the label &lt;code&gt;expression&lt;/code&gt; for the new numerical variable containing the values originally under the &lt;code&gt;G0.05&lt;/code&gt; through &lt;code&gt;U0.3&lt;/code&gt; columns. Assign your result to the variable &lt;code&gt;brauer3&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After completing this step, the &lt;em&gt;one observation per row&lt;/em&gt; rule will be&amp;nbsp;satisfied.&lt;/p&gt;
&lt;h2 id="enforcing-one-column-per-variable-and-one-value-per-cell"&gt;Enforcing one column per variable and one value per&amp;nbsp;cell&lt;/h2&gt;
&lt;p&gt;The second and third rules are intertwined, and so fixing one will help to satisfy the other. Looking at the version of the dataset in &lt;code&gt;brauer3&lt;/code&gt;, we can clearly see that the &lt;em&gt;one value per cell&lt;/em&gt; rule is violated by the &lt;code&gt;NAME&lt;/code&gt; and &lt;code&gt;sample&lt;/code&gt; columns. These are violations that can be fixed using the &lt;code&gt;separate()&lt;/code&gt; function. Let’s separate the &lt;code&gt;sample&lt;/code&gt; column we created with the &lt;code&gt;gather()&lt;/code&gt; function&amp;nbsp;first.&lt;/p&gt;
&lt;div class="callout secondary"&gt;
&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt; If you don’t want the &lt;code&gt;separate()&lt;/code&gt; function to delete any individual letters or symbols when splitting a column, you can set the &lt;code&gt;sep&lt;/code&gt; argument equal to an integer, for example &lt;code&gt;sep = 1&lt;/code&gt;. This tells &lt;code&gt;separate()&lt;/code&gt; to split the column right after the first&amp;nbsp;letter.&lt;/p&gt;
&lt;/div&gt;
&lt;ol start="3" class="example" type="1"&gt;
&lt;li&gt;Separate the &lt;code&gt;sample&lt;/code&gt; column that you created in &lt;strong&gt;Exercise 2&lt;/strong&gt; into two variables, &lt;code&gt;nutrient&lt;/code&gt; and &lt;code&gt;rate&lt;/code&gt;. After separation, the data type for the &lt;code&gt;rate&lt;/code&gt; column should be &lt;em&gt;double&lt;/em&gt; (&lt;code&gt;&amp;lt;dbl&amp;gt;&lt;/code&gt;), not &lt;em&gt;character&lt;/em&gt;. Assign your result to the variable &lt;code&gt;brauer4&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now we turn to the &lt;code&gt;NAME&lt;/code&gt; column where each value is separated by two bars &lt;span class="monospace"&gt;||&lt;/span&gt; and there are five variables contained in each cell. Using the information from the &lt;a href="#about-this-weeks-dataset"&gt;about this week’s dataset&lt;/a&gt; section, we deduce that we should name the new columns &lt;code&gt;gene_name&lt;/code&gt;, &lt;code&gt;biological_process&lt;/code&gt;, &lt;code&gt;molecular_function&lt;/code&gt;, &lt;code&gt;systematic_id&lt;/code&gt;, and &lt;code&gt;number&lt;/code&gt;.&lt;/p&gt;
&lt;div class="callout secondary"&gt;
&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt; If you try to use &lt;code&gt;sep = &amp;quot;||&amp;quot;&lt;/code&gt; in &lt;code&gt;separate()&lt;/code&gt;, it will not work as expected. By default, the bar symbol &lt;span class="monospace"&gt;|&lt;/span&gt; is interpreted as the boolean operator &lt;span class="caps"&gt;OR&lt;/span&gt;, which should be familiar from creating rules for &lt;code&gt;filter()&lt;/code&gt;. To get around this, we can preceed &lt;span class="monospace"&gt;|&lt;/span&gt; with backslashes to signal to R that we want it to read &lt;span class="monospace"&gt;|&lt;/span&gt; as a symbol and not as the boolean operator &lt;span class="caps"&gt;OR&lt;/span&gt;. Thus, we should use &lt;code&gt;sep = &amp;quot;\\|\\|&amp;quot;&lt;/code&gt; to define our&amp;nbsp;separator.&lt;/p&gt;
&lt;/div&gt;
&lt;ol start="4" class="example" type="1"&gt;
&lt;li&gt;Use &lt;code&gt;separate()&lt;/code&gt; to split the values in the &lt;code&gt;NAME&lt;/code&gt; column into five columns named &lt;code&gt;gene_name&lt;/code&gt;, &lt;code&gt;biological_process&lt;/code&gt;, &lt;code&gt;molecular_function&lt;/code&gt;, &lt;code&gt;systematic_id&lt;/code&gt;, and &lt;code&gt;number&lt;/code&gt;. Assign your result to the variable &lt;code&gt;brauer5&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We’re nearly done! If you inspect the dataset with &lt;code&gt;View(brauer5)&lt;/code&gt;, you’ll notice that the text under some of the columns has quotation marks with unnecessary blank space. For example, &lt;code&gt;&amp;quot; molecular function unknown &amp;quot;&lt;/code&gt;. Removing this blank space (typically called “white space”) is called &lt;strong&gt;trimming&lt;/strong&gt;, and we can use the &lt;code&gt;str_trim()&lt;/code&gt; function for this&amp;nbsp;purpose.&lt;/p&gt;
&lt;ol start="5" class="example" type="1"&gt;
&lt;li&gt;&lt;p&gt;Remove the whitespace from the five new columns you created using &lt;code&gt;mutate_at()&lt;/code&gt; in combination with &lt;code&gt;str_trim()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;brauer5 %&amp;gt;%
  mutate_at(vars(gene_name:systematic_id), str_trim)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assign your result to the variable &lt;code&gt;brauer_tidy&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now we’re&amp;nbsp;done!&lt;/p&gt;
&lt;h2 id="visualizations-using-the-tidy-dataset"&gt;Visualizations using the tidy&amp;nbsp;dataset&lt;/h2&gt;
&lt;p&gt;Having a tidy dataset makes it easy to use the rest of the &lt;span class="monospace"&gt;tidyverse&lt;/span&gt; packages, such as &lt;span class="monospace"&gt;ggplot2&lt;/span&gt;. To demonstrate this, we will now create a plot that a biologist would use to explore gene expression trends that emerge due to restricting different nutrients and enforcing different growth&amp;nbsp;rates.&lt;/p&gt;
&lt;ol start="6" class="example" type="1"&gt;
&lt;li&gt;Filter &lt;code&gt;brauer_tidy&lt;/code&gt; so that it only contains entries with &lt;code&gt;gene_name&lt;/code&gt; equal to &lt;code&gt;LEU1&lt;/code&gt;. Then, create a line plot where you place &lt;code&gt;rate&lt;/code&gt; on the horizontal axis, &lt;code&gt;expression&lt;/code&gt; on the vertical axis, and assign different colors to &lt;code&gt;nutrient&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="additional-questions"&gt;Additional&amp;nbsp;questions&lt;/h2&gt;
&lt;div class="additional-questions"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;What are the dataset’s dimensions (the number of rows and columns) after completing the tidying procedure? Do you find it easier to read the data in this format, or did you think the original format was easier to understand? Why or why&amp;nbsp;not?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;In &lt;strong&gt;Exercise 6&lt;/strong&gt; we were able to easily create a line plot of &lt;code&gt;expression&lt;/code&gt; as a function of &lt;code&gt;rate&lt;/code&gt; for the different kinds of nutrients for one of the genes in the microarray. What specifically did the tidying procedure do to make it simple for us to create this plot? Could we still create the same plot with &lt;span class="monospace"&gt;ggplot2&lt;/span&gt; using the untidy version of the dataset? If so, try to write the &lt;span class="monospace"&gt;ggplot2&lt;/span&gt; code for it. If not, identify what it is about the untidy dataset that prevents you from creating the same&amp;nbsp;plot.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="how-to-submit"&gt;How to&amp;nbsp;submit&lt;/h2&gt;
&lt;p&gt;When you are ready to submit, be sure to save, commit, and push your final result so that everything is synchronized to Github. Then, navigate to &lt;strong&gt;your copy&lt;/strong&gt; of the Github repository you used for this assignment. You should see your repository, along with the updated files that you just synchronized to Github. Confirm that your files are up-to-date, and then do the following&amp;nbsp;steps:&lt;/p&gt;
&lt;div class="pull-request"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Click the &lt;em&gt;Pull Requests&lt;/em&gt; tab near the top of the&amp;nbsp;page.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the green button that says “New pull&amp;nbsp;request”.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the dropdown menu button labeled “base:”, and select the option &lt;code&gt;starting&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Confirm that the dropdown menu button labeled “compare:” is set to &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the green button that says “Create pull&amp;nbsp;request”.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Give the &lt;em&gt;pull request&lt;/em&gt; the following title: &lt;span class="monospace"&gt;Submission: Lab 4, FirstName LastName&lt;/span&gt;, replacing &lt;span class="monospace"&gt;FirstName&lt;/span&gt; and &lt;span class="monospace"&gt;LastName&lt;/span&gt; with your actual first and last&amp;nbsp;name.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the messagebox, write: &lt;span class="monospace"&gt;My lab report is ready for grading @jkglasbrenner&lt;/span&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Click “Create pull request” to lock in your&amp;nbsp;submission.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="credits"&gt;Credits&lt;/h2&gt;
&lt;p&gt;This lab is licensed under a &lt;a href="http://creativecommons.org/licenses/by-sa/4.0/"&gt;Creative Commons Attribution-ShareAlike 4.0 International License&lt;/a&gt;. Exercises and instructions written by James Glasbrenner for &lt;span class="caps"&gt;CDS&lt;/span&gt;-102.&lt;/p&gt;
&lt;section class="footnotes"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn1"&gt;&lt;p&gt;Brauer &lt;em&gt;et. al.&lt;/em&gt;, “Coordination of growth rate, cell cycle, stress response, and metabolic activity in yeast”, Mol. Biol. Cell &lt;strong&gt;19&lt;/strong&gt;, 352 (2008).&lt;a href="#fnref1" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id="fn2"&gt;&lt;p&gt;Robinson, David, “Cleaning and Visualizing Genomic Data: A Case Study in Tidy Analysis,” &lt;em&gt;Variance Explained&lt;/em&gt; (2015).&lt;a href="#fnref2" class="footnote-back"&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content><category term="lab"></category></entry><entry><title>Wrangling sales data</title><link href="https://mason-su18-cds-102-2a1.github.io/labs/lab-03-wrangling-sales-data/" rel="alternate"></link><published>2018-05-31T13:30:00-04:00</published><updated>2018-05-31T13:30:00-04:00</updated><author><name>Dr. Glasbrenner</name></author><id>tag:mason-su18-cds-102-2a1.github.io,2018-05-31:/labs/lab-03-wrangling-sales-data/</id><summary type="html">Use &lt;span style="monospace"&gt;dplyr&lt;/span&gt; to transform and analyze sales&amp;nbsp;data</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;This week’s lab will introduce you to data transformations using the &lt;span class="monospace"&gt;dplyr&lt;/span&gt; library, which is loaded as part of &lt;span class="monospace"&gt;tidyverse&lt;/span&gt;. To keep things from becoming too complicated, we practice these commands on a small, synthetic dataset that represents sales of office&amp;nbsp;supplies.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="what-is-data-wrangling"&gt;What is “data&amp;nbsp;wrangling”?&lt;/h2&gt;
&lt;p&gt;The previous lab focused on constructing visualizations using the &lt;code&gt;ggplot2&lt;/code&gt; library. The dataset used for that lab, the &lt;code&gt;galton&lt;/code&gt; dataset, was selected because it was relatively small in size and could be visualized in interesting ways without the need for additional processing. It would certainly be nice if all datasets came in such a form! However, in reality, many datasets need cleaning and to be transformed before you can create a meaningful visualization or answer a question. The dataset need not even be messy; datasets that have been preprocessed and are clean and tidy still may require transformations. The full pipeline for obtaining data, cleaning it up, and transforming it is informally referred to as “data wrangling”, which is summarized in the figure from &lt;a href="http://r4ds.had.co.nz/wrangle-intro.html"&gt;&lt;em&gt;R for Data Science&lt;/em&gt;&lt;/a&gt;&amp;nbsp;below:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://mason-su18-cds-102-2a1.github.io/img/r4ds_data_wrangling.png" title="plot of chunk data-wrangling-figure" alt="plot of chunk data-wrangling-figure" width="60%" style="display: block; margin: auto;" /&gt;&lt;/p&gt;
&lt;p&gt;We start with the &lt;em&gt;transform&lt;/em&gt; part of the data wrangling pipeline, which relies on commands that are part of the &lt;span class="monospace"&gt;dplyr&lt;/span&gt; package, itself part of &lt;span class="monospace"&gt;tidyverse&lt;/span&gt;. Like many of the functions available in the &lt;span class="monospace"&gt;tidyverse&lt;/span&gt;, the command names provide us with clues as to what they do. If you have any prior experience with spreadsheeting software such as Microsoft Excel, you will probably find the commands in &lt;span class="monospace"&gt;dplyr&lt;/span&gt; to be&amp;nbsp;familiar.&lt;/p&gt;
&lt;h2 id="about-this-weeks-dataset"&gt;About this week’s&amp;nbsp;dataset&lt;/h2&gt;
&lt;p&gt;This is a synthetic dataset that contains sales data of office supplies to different regions of the United States. The dataset is stored in the variable &lt;code&gt;office_supplies&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="variables"&gt;Variables&lt;/h3&gt;
&lt;p&gt;This is a tabular dataset with 43 observations on the following&amp;nbsp;variables:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th&gt;Variable&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;&lt;span class="monospace"&gt;order_date&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="monospace"&gt;date&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;The date the office supplies order was placed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;&lt;span class="monospace"&gt;region&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="monospace"&gt;chr&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Shipping region in United States&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;&lt;span class="monospace"&gt;representative&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="monospace"&gt;chr&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Name of sales representative&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;&lt;span class="monospace"&gt;item&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="monospace"&gt;chr&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Item ordered&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td&gt;&lt;span class="monospace"&gt;units&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="monospace"&gt;int&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;How many units of item were sold&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td&gt;&lt;span class="monospace"&gt;unit_price&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;span class="monospace"&gt;dbl&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Price per unit of item&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Like in previous labs, it’s recommended that you take a first look at the dataset by viewing it by running &lt;code&gt;View(office_supplies)&lt;/code&gt; in your &lt;em&gt;Console&lt;/em&gt;&amp;nbsp;window.&lt;/p&gt;
&lt;h2 id="subsetting-over-variables"&gt;Subsetting over&amp;nbsp;variables&lt;/h2&gt;
&lt;p&gt;Let’s start with the &lt;code&gt;select()&lt;/code&gt; function. The &lt;code&gt;select()&lt;/code&gt; function &lt;em&gt;selects&lt;/em&gt; columns from a dataset, which is useful when you’re working with a dataset that contains dozens of&amp;nbsp;variables.&lt;/p&gt;
&lt;ol class="example" type="1"&gt;
&lt;li&gt;&lt;p&gt;Try running the following&amp;nbsp;code:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;office_supplies %&amp;gt;%
  select(representative)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Based on the output, explain what happens when you run this&amp;nbsp;command.&lt;/p&gt;
&lt;p&gt;Try putting an additional column name inside the parentheses of the &lt;code&gt;select()&lt;/code&gt; command (don’t forget the comma!). What does this&amp;nbsp;do?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="callout secondary"&gt;
&lt;p&gt;The strange looking symbol &lt;code&gt;%&amp;gt;%&lt;/code&gt; is called the &lt;strong&gt;pipe&lt;/strong&gt;, and it is a handy way to pass a dataset through a chain of&amp;nbsp;commands.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;There are multiple ways to specify columns with the &lt;code&gt;select()&lt;/code&gt; command. Let’s explore a couple of those&amp;nbsp;ways.&lt;/p&gt;
&lt;ol start="2" class="example" type="1"&gt;
&lt;li&gt;&lt;p&gt;Copy the code you wrote in &lt;strong&gt;Exercise 1&lt;/strong&gt; and replace &lt;code&gt;representative&lt;/code&gt; with &lt;code&gt;representative:unit_price&lt;/code&gt;. What does the colon &lt;code&gt;:&lt;/code&gt; do?&lt;/p&gt;
&lt;p&gt;Next, try putting a minus sign in front of the column names, such as &lt;code&gt;-representative&lt;/code&gt; or &lt;code&gt;-representative:-unit_price&lt;/code&gt;. How does the minus sign affect the&amp;nbsp;output?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="sorting-data"&gt;Sorting&amp;nbsp;data&lt;/h2&gt;
&lt;p&gt;The sort operation is a common and indispensible operation for organizing data, and the function from &lt;span class="monospace"&gt;dplyr&lt;/span&gt; that allows us to sort is called &lt;code&gt;arrange()&lt;/code&gt;. &lt;code&gt;arrange()&lt;/code&gt; sorts columns with textual data (&lt;span class="monospace"&gt;chr&lt;/span&gt; data type) into alphabetical order and sorts numerical data into numerical order. Try running the following&amp;nbsp;code:&lt;/p&gt;
&lt;ol start="3" class="example" type="1"&gt;
&lt;li&gt;&lt;p&gt;Run the following&amp;nbsp;code:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;office_supplies %&amp;gt;%
  arrange(region, item)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Based on the output, does it look like both the &lt;code&gt;region&lt;/code&gt; and &lt;code&gt;item&lt;/code&gt; columns were sorted? Which column was sorted first? What happens if you reverse the order of the columns in your code&amp;nbsp;snippet?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By default, &lt;code&gt;arrange()&lt;/code&gt; will sort data in ascending order. The function &lt;code&gt;desc()&lt;/code&gt; can be used to sort in descending order, and we can mix-and-match which columns are ascending and which columns as&amp;nbsp;descending.&lt;/p&gt;
&lt;ol start="4" class="example" type="1"&gt;
&lt;li&gt;&lt;p&gt;Sort using the variable &lt;code&gt;order_date&lt;/code&gt;. Then, make a copy of the code block you just wrote and then wrap the column name with &lt;code&gt;desc()&lt;/code&gt;, like so: &lt;code&gt;desc(order_date)&lt;/code&gt;. Verify that &lt;code&gt;desc()&lt;/code&gt; sorted the data in the reverse&amp;nbsp;order.&lt;/p&gt;
&lt;p&gt;Copy the starting code from the previous example, and adapt it so that &lt;code&gt;region&lt;/code&gt; is sorted in &lt;em&gt;ascending&lt;/em&gt; order and &lt;code&gt;item&lt;/code&gt; is sorted in &lt;em&gt;descending&lt;/em&gt; order. Write it down and get the&amp;nbsp;output.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="transforming-data"&gt;Transforming&amp;nbsp;data&lt;/h2&gt;
&lt;p&gt;Let’s now try an example that uses the &lt;code&gt;mutate()&lt;/code&gt; function, which is a little more complex. &lt;code&gt;mutate()&lt;/code&gt; lets us &lt;strong&gt;transform&lt;/strong&gt; our dataset by applying the same operation to each row in the dataset and appending the results as a &lt;em&gt;new&lt;/em&gt; column. This would allow you to create a new column in your dataset called &lt;code&gt;total_price&lt;/code&gt; that contains the toal price of each&amp;nbsp;order.&lt;/p&gt;
&lt;ol start="5" class="example" type="1"&gt;
&lt;li&gt;&lt;p&gt;To calculate the total price of an order, we need to multiply the number of units sold by the unit price across each row. Do this by running the following &lt;code&gt;mutate()&lt;/code&gt; command:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;office_supplies %&amp;gt;%
  mutate(total_price = units * unit_price)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After confirming that the above command works, copy this code into a new code block and remove &lt;code&gt;total_price =&lt;/code&gt; from the function input. Does the code still run? If so, what (if anything) is different in the output? What if you ran &lt;code&gt;mutate(final_price = units * unit_price)&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Based on these outputs, describe what the &lt;code&gt;total_price =&lt;/code&gt; part of the command seems to be&amp;nbsp;doing.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We are not limited to only one input at a time in &lt;code&gt;mutate()&lt;/code&gt;. As long as we separate each input by a comma, we can put as many inputs as we want in the &lt;code&gt;mutate()&lt;/code&gt; function!&lt;/p&gt;
&lt;ol start="6" class="example" type="1"&gt;
&lt;li&gt;&lt;p&gt;Starting again with this&amp;nbsp;example,&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;office_supplies %&amp;gt;%
  mutate(total_price = units * unit_price)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;modify it so that there’s a second input in &lt;code&gt;mutate()&lt;/code&gt;, &lt;code&gt;shipping_date = order_date + 2&lt;/code&gt;. Does this add another column? What has happened by adding the number 2 to the rows in the &lt;code&gt;order_date&lt;/code&gt; column?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="immutable-datasets"&gt;Immutable&amp;nbsp;datasets&lt;/h2&gt;
&lt;p&gt;It’s worth pausing for a moment and asking whether any of these commands are permanently changing the way the dataset looks in &lt;code&gt;office_supplies&lt;/code&gt;. Inspect your dataset using &lt;code&gt;View(office_supplies)&lt;/code&gt; to&amp;nbsp;check.&lt;/p&gt;
&lt;ol start="7" class="example" type="1"&gt;
&lt;li&gt;&lt;p&gt;Based on what you observe, has the data frame in &lt;code&gt;office_supplies&lt;/code&gt; been updating with each command, or is it&amp;nbsp;unchanged?&lt;/p&gt;
&lt;p&gt;As a comparison, run the command &lt;code&gt;office_supplies_updated &amp;lt;- mutate(office_supplies, total_price = units * unit_price)&lt;/code&gt; and print out whatever’s in &lt;code&gt;office_supplies_updated&lt;/code&gt;. Has the change stuck&amp;nbsp;now?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="filtering-data"&gt;Filtering&amp;nbsp;data&lt;/h2&gt;
&lt;p&gt;Next up is the &lt;code&gt;filter()&lt;/code&gt; function, which provides a ruled-based way to keep a subset of rows and remove the rest. Here we just consider rules that are simple comparisons, which involve the&amp;nbsp;symbols:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;: greater&amp;nbsp;than&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;: greater than or equal&amp;nbsp;to&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;: less&amp;nbsp;than&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt;: less than or equal&amp;nbsp;to&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!=&lt;/code&gt;: not&amp;nbsp;equal&lt;/li&gt;
&lt;li&gt;&lt;code&gt;==&lt;/code&gt;:&amp;nbsp;equal&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, for example, a comparison rule that would show us all items that cost more than 16 dollars per unit would be &lt;code&gt;unit_price &amp;gt; 16&lt;/code&gt;. A comparison rule that would find all rows with the representative Susan would be &lt;code&gt;representative == &amp;quot;Susan&amp;quot;&lt;/code&gt; (if you are testing for equality with a column of &lt;span class="monospace"&gt;chr&lt;/span&gt; type, then you need to surround any words or values in the column with quotation marks &lt;code&gt;&amp;quot;like so&amp;quot;&lt;/code&gt;.&amp;nbsp;)&lt;/p&gt;
&lt;ol start="8" class="example" type="1"&gt;
&lt;li&gt;&lt;p&gt;Give the &lt;code&gt;filter()&lt;/code&gt; function a try by running the following two code&amp;nbsp;blocks:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;office_supplies %&amp;gt;%
  filter(unit_price &amp;gt; 16)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="r"&gt;&lt;code&gt;office_supplies %&amp;gt;%
  filter(representative == &amp;quot;Susan&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After running the above code, figure out how to write a single line of &lt;code&gt;filter()&lt;/code&gt; code that shows us all the items sold by Susan that cost more than 16 dollars. You should be able to do this based on what we’ve seen so far with the other &lt;span class="monospace"&gt;tidyverse&lt;/span&gt;&amp;nbsp;commands&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Using &lt;code&gt;filter()&lt;/code&gt; is a lot like running an advanced search on a data base, and gives us a convenient way to quickly look up and inspect subsets of&amp;nbsp;data.&lt;/p&gt;
&lt;ol start="9" class="example" type="1"&gt;
&lt;li&gt;Write a filter that shows us all the sales that involved the &lt;code&gt;item&lt;/code&gt; “Pen&amp;nbsp;Set”.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="data-aggregation"&gt;Data&amp;nbsp;aggregation&lt;/h2&gt;
&lt;p&gt;It is common to want to summarize the information contained within a dataset, such as computing sums and averages, or counting how many data points belong to different groups. This is called data aggregation, as it &lt;strong&gt;aggregates&lt;/strong&gt; many data points together and uses them to compute a cetain quantity. We perform data aggregation in R by using the commands &lt;code&gt;group_by()&lt;/code&gt; and &lt;code&gt;summarize()&lt;/code&gt;, which frequently show up as a&amp;nbsp;pair.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;group_by()&lt;/code&gt; command is applied to one or more columns, and allows you create groups that share common values in a column of categorical data. The &lt;code&gt;summarize()&lt;/code&gt; command can be used when you want to do things like calculate the average number of units sold by each representative, or calculate the gross earnings of each &lt;code&gt;item&lt;/code&gt;.&lt;/p&gt;
&lt;ol start="10" class="example" type="1"&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;group_by()&lt;/code&gt; and &lt;code&gt;summarize()&lt;/code&gt; are functions that are easier to understand using examples. First, run this example where we use &lt;code&gt;mean()&lt;/code&gt; to calculate the average of a&amp;nbsp;column:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;office_supplies %&amp;gt;%
  group_by(representative) %&amp;gt;%
  summarize(avg_units_sold = mean(units))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which representative sold the most units on&amp;nbsp;average?&lt;/p&gt;
&lt;p&gt;Let’s run another example where we add together the numbers in a column using &lt;code&gt;sum()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;office_supplies %&amp;gt;%
  mutate(total_price = units * unit_price) %&amp;gt;%
  group_by(item) %&amp;gt;%
  summarize(gross_earnings = sum(total_price))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which item brought in the most gross&amp;nbsp;earnings?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Small changes to how we group our data can have a big impact on what our summary tables look like. This gives us a lot of flexibility in aggregating our data for&amp;nbsp;analysis.&lt;/p&gt;
&lt;ol start="11" class="example" type="1"&gt;
&lt;li&gt;&lt;p&gt;Take the second code example from &lt;strong&gt;Exercise 10&lt;/strong&gt; and modify it so that it groups over two variables instead of&amp;nbsp;one:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;office_supplies %&amp;gt;%
  mutate(total_price = units * unit_price) %&amp;gt;%
  group_by(item, region) %&amp;gt;%
  summarize(gross_earnings = sum(total_price))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How did this change the summary table from what you obtained in &lt;strong&gt;Exercise 10&lt;/strong&gt;? Interpret the table you get as&amp;nbsp;output.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="additional-questions"&gt;Additional&amp;nbsp;questions&lt;/h2&gt;
&lt;div class="additional-questions"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The company wishes to expand their sales to include a new region, Canada. Doing this would require converting the unit prices from &lt;span class="caps"&gt;US&lt;/span&gt; dollars to Canadian Dollars. The current conversion rate is 1 &lt;span class="caps"&gt;US&lt;/span&gt; Dollar = 1.29 Canadian Dollars. So, for example, an item that costs 2.99 &lt;span class="caps"&gt;US&lt;/span&gt; Dollars would convert to &lt;span class="math inline"&gt;\(2.99 &amp;#92;times 1.29 = 3.86\)&lt;/span&gt; Canadian Dollars. Using the &lt;code&gt;mutate()&lt;/code&gt; function, write a code snippet that converts the unit price in &lt;span class="caps"&gt;US&lt;/span&gt; Dollars into Canadian Dollars and stores the result in a new column named &lt;code&gt;unit_price_canadian&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Take the 2nd code example you ran in exercise 10 and assign it to a variable, like&amp;nbsp;so:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;items_gross_earnings &amp;lt;- office_supplies %&amp;gt;%
  mutate(total_price = units * unit_price) %&amp;gt;%
  group_by(item) %&amp;gt;%
  summarize(gross_earnings = sum(total_price))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Use &lt;code&gt;items_gross_earnings&lt;/code&gt; to create a bar chart visualization of the gross earnings per&amp;nbsp;item.&lt;/p&gt;
&lt;div class="callout secondary"&gt;
&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt; You will want to use &lt;code&gt;geom_col()&lt;/code&gt; for&amp;nbsp;this.&lt;/p&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="how-to-submit"&gt;How to&amp;nbsp;submit&lt;/h2&gt;
&lt;p&gt;When you are ready to submit, be sure to save, commit, and push your final result so that everything is synchronized to Github. Then, navigate to &lt;strong&gt;your copy&lt;/strong&gt; of the Github repository you used for this assignment. You should see your repository, along with the updated files that you just synchronized to Github. Confirm that your files are up-to-date, and then do the following&amp;nbsp;steps:&lt;/p&gt;
&lt;div class="pull-request"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Click the &lt;em&gt;Pull Requests&lt;/em&gt; tab near the top of the&amp;nbsp;page.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the green button that says “New pull&amp;nbsp;request”.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the dropdown menu button labeled “base:”, and select the option &lt;code&gt;starting&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Confirm that the dropdown menu button labeled “compare:” is set to &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the green button that says “Create pull&amp;nbsp;request”.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Give the &lt;em&gt;pull request&lt;/em&gt; the following title: &lt;span class="monospace"&gt;Submission: Lab 3, FirstName LastName&lt;/span&gt;, replacing &lt;span class="monospace"&gt;FirstName&lt;/span&gt; and &lt;span class="monospace"&gt;LastName&lt;/span&gt; with your actual first and last&amp;nbsp;name.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the messagebox, write: &lt;span class="monospace"&gt;My lab report is ready for grading @jkglasbrenner&lt;/span&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Click “Create pull request” to lock in your&amp;nbsp;submission.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="credits"&gt;Credits&lt;/h2&gt;
&lt;p&gt;This lab is licensed under a &lt;a href="http://creativecommons.org/licenses/by-sa/4.0/"&gt;Creative Commons Attribution-ShareAlike 4.0 International License&lt;/a&gt;. Exercises and instructions written by James Glasbrenner for &lt;span class="caps"&gt;CDS&lt;/span&gt;-102.&lt;/p&gt;
</content><category term="lab"></category></entry><entry><title>Exploration by visualization: the Galton dataset</title><link href="https://mason-su18-cds-102-2a1.github.io/labs/lab-02-exploration-by-visualization-the-galton-dataset/" rel="alternate"></link><published>2018-05-29T13:30:00-04:00</published><updated>2018-05-29T13:30:00-04:00</updated><author><name>Dr. Glasbrenner</name></author><id>tag:mason-su18-cds-102-2a1.github.io,2018-05-29:/labs/lab-02-exploration-by-visualization-the-galton-dataset/</id><summary type="html">Explore the Galton dataset using data&amp;nbsp;visualization.</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;This week’s lab shows you how to use the &lt;span class="monospace"&gt;ggplot2&lt;/span&gt; package to visualize datasets and how visualization plays a crucial role in data&amp;nbsp;exploration.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="why-data-visualization"&gt;Why data&amp;nbsp;visualization?&lt;/h2&gt;
&lt;p&gt;Why is data visualization an important topic? On the face of it, you might wonder why we need to dedicate any time to this topic. Aren’t plots really easy now that we all have computers? And isn’t making plots and figures one of the &lt;em&gt;last&lt;/em&gt; things that we do for a project or lab report, after we’ve figured everything out? Why start with this? Since a picture (or visualization) is worth a thousand words, take a moment to explore the data visualizations linked&amp;nbsp;below.&lt;/p&gt;
&lt;div class="callout primary"&gt;
&lt;p&gt;&lt;strong&gt;After a few minutes, be prepared to share with the class one thing you noticed about one of the visualizations that you think made it effective at conveying&amp;nbsp;information.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Why do buses bunch? &lt;a href="http://setosa.io/bus/" class="uri"&gt;http://setosa.io/bus/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;U.S.&lt;/span&gt; Age Pyramid Becomes a Rectangle: &lt;a href="http://www.pewresearch.org/next-america/#Two-Dramas-in-Slow-Motion" class="uri"&gt;http://www.pewresearch.org/next-america/#Two-Dramas-in-Slow-Motion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Visualizations have an important role to play in nearly every stage of a data science project. High-quality visualizations help people to understand your results and can activate their curiosity about your work and ideas. Creating visualizations in R is also easy and fun, and learning how to make them will help you become more comfortable with using R and RStudio. You will quickly see how simple it is to make colorful and eye-catching&amp;nbsp;plots!&lt;/p&gt;
&lt;div class="callout secondary"&gt;
&lt;p&gt;We will use the &lt;code&gt;ggplot2&lt;/code&gt; library for all of our visualizations. You are encouraged to download and use the &lt;a href="https://www.rstudio.com/wp-content/uploads/2016/11/ggplot2-cheatsheet-2.1.pdf"&gt;official &lt;code&gt;ggplot2&lt;/code&gt; cheatsheet&lt;/a&gt; for this and future&amp;nbsp;labs.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="about-this-weeks-dataset"&gt;About this week’s&amp;nbsp;dataset&lt;/h2&gt;
&lt;p&gt;You will be exploring the famous dataset by Francis Galton for this week’s lab on data visualization, which is automatically loaded into the variable &lt;code&gt;galton&lt;/code&gt; for you in the RMarkdown file for your lab report. Francis Galton was developing ways to quantify the heritability of traits in the 1880s, and as part of this work he collected data on the heights of adult children and their parents. To explore the dataset, type the following in your &lt;em&gt;Console&lt;/em&gt;&amp;nbsp;window:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;View(galton)&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="variables"&gt;Variables&lt;/h3&gt;
&lt;p&gt;This is a tabular dataset with 898 observations on the following&amp;nbsp;variables:&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style="width: 7%" /&gt;
&lt;col style="width: 5%" /&gt;
&lt;col style="width: 87%" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th style="text-align: left;"&gt;Variable&lt;/th&gt;
&lt;th style="text-align: left;"&gt;Type&lt;/th&gt;
&lt;th style="text-align: left;"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: left;"&gt;&lt;span class="monospace"&gt;family&lt;/span&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;span class="monospace"&gt;chr&lt;/span&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;a category with levels for each family&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td style="text-align: left;"&gt;&lt;span class="monospace"&gt;father&lt;/span&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;span class="monospace"&gt;dbl&lt;/span&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;the father’s height (in inches)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: left;"&gt;&lt;span class="monospace"&gt;mother&lt;/span&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;span class="monospace"&gt;dbl&lt;/span&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;the mother’s height (in inches)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td style="text-align: left;"&gt;&lt;span class="monospace"&gt;sex&lt;/span&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;span class="monospace"&gt;chr&lt;/span&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;the child’s sex: &lt;span class="monospace"&gt;F&lt;/span&gt; or &lt;span class="monospace"&gt;M&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: left;"&gt;&lt;span class="monospace"&gt;height&lt;/span&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;span class="monospace"&gt;dbl&lt;/span&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;the child’s height as an adult (in inches)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td style="text-align: left;"&gt;&lt;span class="monospace"&gt;nkids&lt;/span&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;span class="monospace"&gt;int&lt;/span&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;the number of adult children in the family, or, at least, the number whose heights Galton recorded.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="sources"&gt;Sources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The data were transcribed by &lt;span class="caps"&gt;J.A.&lt;/span&gt; Hanley who has published them at &lt;a href="http://www.medicine.mcgill.ca/epidemiology/hanley/galton/" class="uri"&gt;http://www.medicine.mcgill.ca/epidemiology/hanley/galton/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Reference: “‘Transmuting’ women into men: Galton’s family data on human stature” (2004) &lt;em&gt;The American Statistician&lt;/em&gt;,&amp;nbsp;58(3):237-243.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="visualization-by-example"&gt;Visualization by&amp;nbsp;example&lt;/h2&gt;
&lt;p&gt;Before we discuss the general format for creating &lt;span class="monospace"&gt;ggplot2&lt;/span&gt; plots, let’s play around with some&amp;nbsp;examples:&lt;/p&gt;
&lt;ol class="example" type="1"&gt;
&lt;li&gt;&lt;p&gt;In your lab report, create an R code block that contains the following&amp;nbsp;code:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;ggplot(data = galton) +
  geom_histogram(mapping = aes(x = height), bins = 30)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To run the code, either click the green “play” button in the upper right corner of the R code block or, while your cursor is inside the code block, press &lt;code&gt;&amp;lt;CTRL&amp;gt;-&amp;lt;SHIFT&amp;gt;-&amp;lt;ENTER&amp;gt;&lt;/code&gt;. This should create a plot called a&amp;nbsp;histogram.&lt;/p&gt;
&lt;p&gt;After creating the histogram, look at the &lt;code&gt;height&lt;/code&gt; column in the data table you can view with &lt;code&gt;View(galton)&lt;/code&gt; and compare it with the histogram. Then, describe what the histogram is doing with the data in this&amp;nbsp;column.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The input parameter &lt;code&gt;bins = 30&lt;/code&gt; controls an important visual element in the histogram plot. Let’s experiment with the parameter in order to figure out what it&amp;nbsp;does.&lt;/p&gt;
&lt;ol start="2" class="example" type="1"&gt;
&lt;li&gt;Using the code you wrote in &lt;strong&gt;Exercise 1&lt;/strong&gt; as a starting point, try setting the input keyword &lt;code&gt;bins&lt;/code&gt; equal to something &lt;em&gt;larger&lt;/em&gt; than the number 30, and then equal to something &lt;em&gt;smaller&lt;/em&gt; than the number 30. This will create two plots. Then, change the input keyword from &lt;code&gt;bins&lt;/code&gt; to &lt;code&gt;binwidth&lt;/code&gt; and set its value equal to 1. Compare the plots and write a conclusion about what the &lt;code&gt;bins&lt;/code&gt; and &lt;code&gt;binwidth&lt;/code&gt; inputs&amp;nbsp;control.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It is simple to add additional arguments to the aesthetic input &lt;code&gt;aes()&lt;/code&gt; that change the way data are shown, which can reveal trends that were previously hidden from view. Let’s see what the &lt;code&gt;fill&lt;/code&gt; argument does to our&amp;nbsp;histogram:&lt;/p&gt;
&lt;ol start="3" class="example" type="1"&gt;
&lt;li&gt;&lt;p&gt;Write the following code in your lab&amp;nbsp;report:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;ggplot(data = galton) +
  geom_histogram(
    mapping=aes(x = height, fill = sex), binwidth = 1, alpha = 0.5,
    position=&amp;quot;identity&amp;quot;
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run the block and look at the output. What did adding &lt;code&gt;fill = sex&lt;/code&gt; do? Does this change the way you might interpret the visualization? What kinds of differences stand out now that we added&amp;nbsp;this?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As you can now see, changing one of the inputs in your &lt;span class="monospace"&gt;ggplot2&lt;/span&gt; code can have a substantial effect on the way your visualization looks. When a visualization reveals new information, we should describe and interpret it in our lab&amp;nbsp;reports.&lt;/p&gt;
&lt;ol start="4" class="example" type="1"&gt;
&lt;li&gt;Describe the shape of the male and female height distributions and where they seem to be centered around. Upon your visual inspection, does there appear to be a tangible difference in the average height for these two distributions? Based on what you know about the relative heights of people, is this a result that you would have expected to see? Why or why&amp;nbsp;not?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Based on what you’ve seen so far, do you understand what &lt;strong&gt;all&lt;/strong&gt; of the inputs are doing? The exercise below guides you through the process of exploring how the different inputs affect the plot’s&amp;nbsp;look:&lt;/p&gt;
&lt;ol start="5" class="example" type="1"&gt;
&lt;li&gt;&lt;p&gt;A good way to figure out how R works is to experiment with inputs. What happens if you change the value of &lt;code&gt;alpha = 0.5&lt;/code&gt; (keep it between 0 and 1). What happens if you remove the input &lt;code&gt;position = &amp;quot;identity&amp;quot;&lt;/code&gt;? What happens if you replace it with &lt;code&gt;position = &amp;quot;dodge&amp;quot;&lt;/code&gt;? What does it change in your&amp;nbsp;output?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt; When moving the input, be careful with the commas! A comma should separate each&amp;nbsp;input.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="the-ggplot2-syntax"&gt;The &lt;span class="monospace"&gt;ggplot2&lt;/span&gt;&amp;nbsp;syntax&lt;/h2&gt;
&lt;p&gt;Let’s take a small break from making plots and review the general syntax for creating a &lt;span class="monospace"&gt;ggplot2&lt;/span&gt; figure. The command &lt;code&gt;ggplot()&lt;/code&gt;, as you might have figured out already, creates the plot window. Commands with the prefix &lt;code&gt;geom_&lt;/code&gt; — such as &lt;code&gt;geom_histogram()&lt;/code&gt; — convert data points into different kinds of visualizations, and the command &lt;code&gt;aes()&lt;/code&gt; controls the aesthetic properties of each &lt;code&gt;geom_&lt;/code&gt; object. We then specify input parameters inside the parentheses of these commands, &lt;em&gt;with each input separated from neighboring inputs by commas&lt;/em&gt; &lt;code&gt;,&lt;/code&gt; &lt;em&gt;and input names and values separated by the equals sign&lt;/em&gt; &lt;code&gt;=&lt;/code&gt;. In general, visualizations in &lt;span class="monospace"&gt;ggplot2&lt;/span&gt; have a predictable structure for the commands you need to enter. The general pattern&amp;nbsp;is:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;ggplot(data = &amp;lt;data&amp;gt;) +                     # Required in all ggplot2 visualizations
  geom_&amp;lt;function&amp;gt;(
    mapping = aes(&amp;lt;mapping&amp;gt;),               # Required in all ggplot2 visualizations
    stat = &amp;lt;stat&amp;gt;,                          # Optional, sensible default chosen
    position = &amp;lt;position&amp;gt;                   # Optional, sensible default chosen
  ) +
  coord_&amp;lt;function&amp;gt; +                        # Optional, sensible default chosen
  facet_&amp;lt;function&amp;gt; +                        # Optional, sensible default chosen
  scale_&amp;lt;function&amp;gt; +                        # Optional, sensible default chosen
  theme_&amp;lt;function&amp;gt;                          # Optional, sensible default chosen&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above, anywhere you see a word &lt;span class="monospace"&gt;&lt;surrounded&gt;&lt;/span&gt; in angular brackets, you can replace it with one of several choices. Bare minimum, you must always specify the first two functions, all the rest are optional and have sensible defaults chosen for you. Also note that each major category, those being &lt;span class="monospace"&gt;geom_&lt;/span&gt; objects, &lt;span class="monospace"&gt;coord_&lt;/span&gt; objects, &lt;span class="monospace"&gt;facet_&lt;/span&gt; objects, &lt;span class="monospace"&gt;scale_&lt;/span&gt; objects, and &lt;span class="monospace"&gt;theme_&lt;/span&gt; objects, are added to the &lt;span class="monospace"&gt;ggplot2&lt;/span&gt; “sentence” via the plus sign &lt;code&gt;+&lt;/code&gt;. Think of it as a series of layers: first you lay down the canvas (&lt;code&gt;ggplot&lt;/code&gt;), then you plot the data using a certain type of plot (&lt;code&gt;geom_&amp;lt;function&amp;gt;&lt;/code&gt;) as the second layer, and afterward you tweak and polish the plot using additional layers to find-tune things. This layered approach allows you to create nice figures without much effort or the need to memorize dozens of&amp;nbsp;commands.&lt;/p&gt;
&lt;h2 id="scatterplots"&gt;Scatterplots&lt;/h2&gt;
&lt;p&gt;Let’s further explore the data using another type of visualization, the&amp;nbsp;scatter-plot.&lt;/p&gt;
&lt;ol start="6" class="example" type="1"&gt;
&lt;li&gt;&lt;p&gt;Use the following code to create a scatter-plot of each person’s height as a function of their father’s&amp;nbsp;height.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;ggplot(data = galton) +
  geom_point(mapping = aes(x = father, y = height))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, &lt;code&gt;height&lt;/code&gt; is the response (dependent) variable and &lt;code&gt;father&lt;/code&gt; would be the explanatory (independent) variable. Describe any trends that you see using full&amp;nbsp;sentences.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Next, we should try and create a plot that is similar in spirit to what we did in &lt;strong&gt;Exercise 3&lt;/strong&gt;, so that we can see how the &lt;code&gt;height&lt;/code&gt; variable depends on the &lt;code&gt;father&lt;/code&gt; variable when the &lt;code&gt;sex&lt;/code&gt; variable is taken into account. One important difference to know is that we need to use the word &lt;code&gt;color&lt;/code&gt; as an input instead of &lt;code&gt;fill&lt;/code&gt;. Otherwise, the procedure for grouping over the &lt;code&gt;sex&lt;/code&gt; variable is basically the&amp;nbsp;same.&lt;/p&gt;
&lt;ol start="7" class="example" type="1"&gt;
&lt;li&gt;Figure out how to group the data over the &lt;code&gt;sex&lt;/code&gt; variable using the &lt;code&gt;color&lt;/code&gt; input and create a new plot. What does this plot tell you about the relationship between the height measurements and the &lt;code&gt;sex&lt;/code&gt; variable?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="faceting"&gt;Faceting&lt;/h2&gt;
&lt;p&gt;Let’s introduce another new concept, the facet. Facets create visualizations with multiple panels, splitting things up across a categorical variable. Let’s apply this to our scatter-plot that we created in &lt;strong&gt;Exercise 6&lt;/strong&gt;.&lt;/p&gt;
&lt;ol start="8" class="example" type="1"&gt;
&lt;li&gt;&lt;p&gt;Copy your code from &lt;strong&gt;Exercise 6&lt;/strong&gt; that created a scatter-plot. Add the following new command to your code snippet using the &lt;code&gt;+&lt;/code&gt; sign:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;facet_grid(. ~ sex)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Describe what you get as output. Then, create a new code block where you reverse the input for &lt;code&gt;facet_grid&lt;/code&gt; like&amp;nbsp;so:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;facet_grid(sex ~ .)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What did adding &lt;code&gt;facet_grid&lt;/code&gt; do to your output, and what does the order of &lt;code&gt;. ~ sex&lt;/code&gt; versus &lt;code&gt;sex ~ .&lt;/code&gt; seem to do? Is the information presented here any different from the information in &lt;strong&gt;Exercise 7&lt;/strong&gt;?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="modeling-in-ggplot2"&gt;Modeling in &lt;span class="monospace"&gt;ggplot2&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;You can actually create regression models using &lt;code&gt;geom_smooth&lt;/code&gt;, which is another handy way to look for trends. You can choose from one of several kinds of regression methods. Here, we’ll use linear regression for creating our models (perhaps you remember drawing one of these “lines of best fit” by hand in a prior science or math&amp;nbsp;class).&lt;/p&gt;
&lt;ol start="9" class="example" type="1"&gt;
&lt;li&gt;&lt;p&gt;Copy your code from &lt;strong&gt;Exercise 6&lt;/strong&gt; that created a scatter-plot. Add the following new command to your code snippet using the &lt;code&gt;+&lt;/code&gt; sign:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;geom_smooth(mapping = aes(x = father, y = height), method = &amp;quot;lm&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Describe the line that you get as output. Does it follow the trends (if any) you’ve previously described in the data? What do you think the semi-transparent gray region around the line stands&amp;nbsp;for?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When creating a graph, you often want to make some touch ups after you’ve figured out what to plot. Do the following to add some extra polish to the plot you made in &lt;strong&gt;Exercise 9&lt;/strong&gt;.&lt;/p&gt;
&lt;ol start="10" class="example" type="1"&gt;
&lt;li&gt;&lt;p&gt;Copy your code from &lt;strong&gt;Exercise 9&lt;/strong&gt; and add the following command to your&amp;nbsp;code:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;labs(
  title = &amp;quot;Height of children as adults versus the height of their fathers&amp;quot;,
  x = &amp;quot;Father&amp;#39;s height (in)&amp;quot;,
  y = &amp;quot;Adult child&amp;#39;s height (in)&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should also alter the size of the scatterplot circles by adding &lt;code&gt;size = 2&lt;/code&gt; as an input in &lt;code&gt;geom_point&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="additional-questions"&gt;Additional&amp;nbsp;questions&lt;/h2&gt;
&lt;div class="additional-questions"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Create a similar plot to &lt;strong&gt;Exercise 6&lt;/strong&gt; and make a scatter-plot of each person’s height as a function of their &lt;em&gt;mother’s&lt;/em&gt; height. Describe any trends that you see using full sentences. If there’s a trend both here and in &lt;strong&gt;Exercise 6&lt;/strong&gt;, does it follow the same general direction or does it not? If the trends move in the same direction, then does one trend look stronger than the other? If so, which one? Explain how you know this using full&amp;nbsp;sentences.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Start with your code from &lt;strong&gt;Exercise 8&lt;/strong&gt; and add a &lt;code&gt;geom_smooth&lt;/code&gt; command that separately performs a linear regression on the male and female categories. Each subplot (or facet) should have a line in it. Additionally, polish the graph using what you learned in &lt;strong&gt;Exercise 10&lt;/strong&gt;. Intrepret your results and explain how well these visualizations explain the trends in the dataset, if&amp;nbsp;any.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Compare the &lt;code&gt;geom_smooth&lt;/code&gt; trend-lines for when used the father’s height only and when you used both the father’s height and whether the child was male or female. Do they both show the same trend? Is one trend more “powerful” than the other? Why or why not? Remember to respond by writing full&amp;nbsp;sentences.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="how-to-submit"&gt;How to&amp;nbsp;submit&lt;/h2&gt;
&lt;p&gt;When you are ready to submit, be sure to save, commit, and push your final result so that everything is synchronized to Github. Then, navigate to &lt;strong&gt;your copy&lt;/strong&gt; of the Github repository you used for this assignment. You should see your repository, along with the updated files that you just synchronized to Github. Confirm that your files are up-to-date, and then do the following&amp;nbsp;steps:&lt;/p&gt;
&lt;div class="pull-request"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Click the &lt;em&gt;Pull Requests&lt;/em&gt; tab near the top of the&amp;nbsp;page.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the green button that says “New pull&amp;nbsp;request”.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the dropdown menu button labeled “base:”, and select the option &lt;code&gt;starting&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Confirm that the dropdown menu button labeled “compare:” is set to &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the green button that says “Create pull&amp;nbsp;request”.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Give the &lt;em&gt;pull request&lt;/em&gt; the following title: &lt;span class="monospace"&gt;Submission: Lab 2, FirstName LastName&lt;/span&gt;, replacing &lt;span class="monospace"&gt;FirstName&lt;/span&gt; and &lt;span class="monospace"&gt;LastName&lt;/span&gt; with your actual first and last&amp;nbsp;name.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the messagebox, write: &lt;span class="monospace"&gt;My lab report is ready for grading @jkglasbrenner&lt;/span&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Click “Create pull request” to lock in your&amp;nbsp;submission.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="credits"&gt;Credits&lt;/h2&gt;
&lt;p&gt;This lab is licensed under a &lt;a href="http://creativecommons.org/licenses/by-sa/4.0/"&gt;Creative Commons Attribution-ShareAlike 4.0 International License&lt;/a&gt;. &lt;a href="#about-the-galton-dataset"&gt;The description of the &lt;span class="monospace"&gt;Galton&lt;/span&gt; dataset&lt;/a&gt; was adapted from the documentation of the same dataset that’s available in the &lt;a href="https://github.com/ProjectMOSAIC/mosaicData"&gt;&lt;span class="monospace"&gt;mosaicData&lt;/span&gt; R package&lt;/a&gt; and some of the lab exercises were adapted from problem sets found in &lt;em&gt;Modern Data Science with R&lt;/em&gt; by Benjamin Baumer, Daniel Kaplan, and Nicholas Horton. All other exercises and instructions written by James Glasbrenner for &lt;span class="caps"&gt;CDS&lt;/span&gt;-102.&lt;/p&gt;
</content><category term="lab"></category></entry><entry><title>Reproducible research with RMarkdown and Github</title><link href="https://mason-su18-cds-102-2a1.github.io/labs/lab-01-learning-to-use-github-and-rmarkdown/" rel="alternate"></link><published>2018-05-24T13:30:00-04:00</published><updated>2018-05-24T13:30:00-04:00</updated><author><name>Dr. Glasbrenner</name></author><id>tag:mason-su18-cds-102-2a1.github.io,2018-05-24:/labs/lab-01-learning-to-use-github-and-rmarkdown/</id><summary type="html">Introducing R, RStudio, Github and&amp;nbsp;RMarkdown!</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;This first lab will serve as a general introduction to the major tools and platforms that we will be using throughout the semester, which are R, RStudio, and Git/Github. R is the name of the programming language itself and RStudio is a convenient interface, and both are installed on the lab computers. For this first lab, we request that you login to the RStudio Server &lt;a href="https://rstudio.cos.gmu.edu" class="uri"&gt;https://rstudio.cos.gmu.edu&lt;/a&gt;, as installing and setting up everything takes some&amp;nbsp;time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="rstudio"&gt;RStudio&lt;/h2&gt;
&lt;p&gt;The lab instructor will guide you through how to launch RStudio for the first time. When you launch RStudio, you will see an interface that looks something like&amp;nbsp;this:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://mason-su18-cds-102-2a1.github.io/img/rstudio_interface.png" title="plot of chunk rstudio-interface" alt="plot of chunk rstudio-interface" width="100%" style="display: block; margin: auto;" /&gt;&lt;/p&gt;
&lt;p&gt;The panel in the upper right contains your workspace as well as a history of the commands that you’ve previously entered. Any plots that you generate will show up in the panel in the lower right&amp;nbsp;corner.&lt;/p&gt;
&lt;p&gt;The panel on the lower left is where you can enter R commands. It’s called the &lt;em&gt;console&lt;/em&gt;. Everytime you launch RStudio, it will have the same text at the top of the console telling you the version of R that you’re running. Below that information is the &lt;em&gt;prompt&lt;/em&gt;. As its name suggests, this prompt is really a request, a request for a command. When you want to test out an R command and not necessarily save it to a file, this is the place to do&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;You will need to install some packages before going further. Enter the following command at the R prompt (i.e. right after &lt;code&gt;&amp;gt;&lt;/code&gt; on the console) by typing it&amp;nbsp;in:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;install.packages(&amp;quot;tidyverse&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will see some output pass by. Just let it run, and when it’s completed, move on to the next&amp;nbsp;section.&lt;/p&gt;
&lt;h2 id="getting-started-with-github"&gt;Getting started with&amp;nbsp;Github&lt;/h2&gt;
&lt;p&gt;Please sign up for an account on &lt;a href="http://github.com"&gt;Github&lt;/a&gt; using your Mason email address if you do not have one already. If you already have a Github account, please update your profile to use your Mason email address. If you would prefer to not do this, then create a second account using your Mason email address&amp;nbsp;instead.&lt;/p&gt;
&lt;p&gt;Obtain the Lab01 repository on GitHub through the link in Slack. Click “Clone or Download”, and make sure it says “Clone with &lt;span class="caps"&gt;SSH&lt;/span&gt;” in bold in the top left of the pop-up box. If not, click on the blue “use &lt;span class="caps"&gt;SSH&lt;/span&gt;” button on the top right of the pop-up box. Now copy the link in the box to your&amp;nbsp;clipboard.&lt;/p&gt;
&lt;p&gt;In RStudio, go to File -&amp;gt; New Project. Click Version Control, then Git. Paste the link you just copied into the Repository &lt;span class="caps"&gt;URL&lt;/span&gt; box. Leave the Project directory name blank. Click Browse and create a directory where you store your labs, for example as &lt;code&gt;Documents/102labs&lt;/code&gt;, and select it. An RStudio project should now open up, which will allow you to start working on your homework assignment. You will probably see a blank console screen. However, in RStudio you should also see a list of all of the files available. Click on the &lt;code&gt;lab01.Rmd&lt;/code&gt; file and edit away. If you save and close R Studio and want to go back to editing your project, open up R Studio, then go to File -&amp;gt; Open Project. Navigate to the project directory and double click on the .Rproj&amp;nbsp;file.&lt;/p&gt;
&lt;p&gt;Note that if you received an error in the above steps, you may have to clone with &lt;span class="caps"&gt;HTTPS&lt;/span&gt; instead of &lt;span class="caps"&gt;SSH&lt;/span&gt;. You can do this by again clicking on the “Clone or Download” button in the repository page, then clicking “Use &lt;span class="caps"&gt;HTTPS&lt;/span&gt;” in the top right of the pop-up box. Now copy the link and repeat this&amp;nbsp;step.&lt;/p&gt;
&lt;h2 id="getting-familiar-with-rmarkdown"&gt;Getting familiar with&amp;nbsp;RMarkdown&lt;/h2&gt;
&lt;p&gt;Now that you’ve obtained your personal lab template from Github and opened it in RStudio, we can start learning about RMarkdown. The instructor will play this video after you’ve had time to sign up for Github to introduce what RMarkdown&amp;nbsp;is:&lt;/p&gt;
&lt;!--html_preserve--&gt;
&lt;iframe class="vimeo-embed" src="https://player.vimeo.com/video/178485416" width="100%" height="350" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;
&lt;/iframe&gt;
&lt;!--/html_preserve--&gt;
&lt;p&gt;As you can see, the combination of RMarkdown and RStudio combines text processing with the ability to execute code written in R. However, unlike software like Microsoft Word, there aren’t any formatting buttons for doing things like creating &lt;strong&gt;bold&lt;/strong&gt; or &lt;em&gt;italicized&lt;/em&gt; text. So how can you format your text? RMarkdown does this using symbols that stand for different types of text markups. For example, typing &lt;code&gt;**bold text**&lt;/code&gt; in RMarkdown signals you want the words “bold text” to be bolded. Paragraphs are separated by a blank line, for&amp;nbsp;example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;This is the end of the first paragraph.

This starts the next paragraph.
However, putting a line right below it will not start a new paragraph.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s get some practice by typing in some&amp;nbsp;examples!&lt;/p&gt;
&lt;div class="callout secondary"&gt;
&lt;p&gt;There is an &lt;a href="/doc/rstudio-IDE-cheatsheet.pdf"&gt;official cheatsheet available for you to download&lt;/a&gt;. It’s recommended that you have this available to you at all times. You may even want to print it out before next class so that you can easily reference&amp;nbsp;it.&lt;/p&gt;
&lt;/div&gt;
&lt;ol class="example" type="1"&gt;
&lt;li&gt;Fill in your name and other information in the spaces at the top of the file if you haven’t already. Then, click the the “knit” icon just above the editing window (if a drop-down menu appears, choose “knit to &lt;span class="caps"&gt;HTML&lt;/span&gt;”). Based on the output that you see, explain what the &lt;code&gt;##&lt;/code&gt; and &lt;code&gt;####&lt;/code&gt; symbols are doing to the&amp;nbsp;text.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s write some more Markdown and see what it&amp;nbsp;does.&lt;/p&gt;
&lt;ol start="2" class="example" type="1"&gt;
&lt;li&gt;Type the code in the box below into your lab report file exactly you see it. Then, knit the file again and look at the output. Write a short explanation of what each markup symbol&amp;nbsp;does.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;*What happens when you surround text with one-star pairs?*

**What happens when you surround text with two-star pairs?**

***What happens when you surround text with three-star pairs?***

1.  Start typing this list. Note there are two spaces between the period and the word &amp;quot;Start&amp;quot;.
2.  Type the second line of the list
1.  What happens if I type step 3 as another step 1?

*   What does this star at the beginning do?
*   Visually, it&amp;#39;s similar to the numbered list.

1.  What happens if we nest a list?
    1.  Type four spaces, then type the number
    2.  Did this do what you expected?
2.  What if we contine the numbers this way?
    *   What happens if we indent using stars?
    *   Let&amp;#39;s add another one for good measure.
        *   Can we get another level of nesting?
        
[What does this do?](https://google.com)
        
![How is this different from the above?](test-image.jpeg)&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="interlude-how-to-save-your-work-back-to-github"&gt;Interlude: How to save your work back to&amp;nbsp;Github&lt;/h2&gt;
&lt;p&gt;Now that you’ve typed some material into your RMarkdown document, let’s take a snapshot of our work using what is called a “commit”. First, save your work in the traditional way by going to File -&amp;gt; Save or clicking the floppy disk icon just above the editing window. Next, click on the &lt;span class="monospace"&gt;&lt;span class="caps"&gt;GIT&lt;/span&gt;&lt;/span&gt; toolbar dropdown menu and select “Commit”. You will see a list of one or more filenames. Click on one of them. You will see some text appear in the lower area. Text highlighted in green has been added to the file since the last snapshot, while text highlighted in red has been deleted. Next, to the left of the filenames is a checkbox marked “Staged”. Staging just means selecting the files that we want to use when taking a snapshot. Stage the file &lt;code&gt;lab01.Rmd&lt;/code&gt;. Then, to the right, write a brief, informative message in the text box labeled “Commit message”. When you are done, click the commit button just below this text&amp;nbsp;box.&lt;/p&gt;
&lt;div class="callout primary"&gt;
&lt;p&gt;Two things about committing. One, you should commit somewhat frequently. At minimum, you should try and make a commit each time that you’ve finished a lab exercise. Two, leave informative commit messages. “Added stuff” will not help you if you’re looking at your commit history in a year. A message like “Typed in Lab 1 RMarkdown examples” will be more&amp;nbsp;useful.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Important note!&lt;/strong&gt; The above process does all this saving and snapshoting on the local computer that you’re currently using. So far we have not synchronized &lt;em&gt;anything&lt;/em&gt; back to the Github website. Without synchronizing back, you will not be able to ultimately submit the lab or have the lab instructor read and grade it. Also, and this is important, if you don’t synchronize, you will not be able to work on your lab report from another&amp;nbsp;computer.&lt;/p&gt;
&lt;p&gt;In the world of Github, synchronizing &lt;em&gt;from&lt;/em&gt; our local computer &lt;em&gt;to&lt;/em&gt; the Github website is called a “Push”. So let’s do that now. In the interactive commit window we opened earlier, in the upper right-hand corner you should see a button labeled “Push”, click that now. Alternatively, if the interactive commit window isn’t open, you can just click on the &lt;span class="caps"&gt;GIT&lt;/span&gt; toolbar dropdown menu and select “Push&amp;nbsp;branch”.&lt;/p&gt;
&lt;div class="callout primary"&gt;
&lt;p&gt;The synchronizing can go in the opposite direction as well, which is called a “Pull”. One reason you would use “Pull” is if you are working on the lab report from more than one computer throughout the day. You would push your commits from the first computer, move to the second computer, and then use pull to get all the changes you made and&amp;nbsp;synchronized.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="more-markdown"&gt;More&amp;nbsp;Markdown&lt;/h2&gt;
&lt;p&gt;Now that we’ve saved and synchronized our work on Github, let’s return to RMarkdown. During the rest of the lab, you are encouraged to commit early and commit&amp;nbsp;often.&lt;/p&gt;
&lt;ol start="3" class="example" type="1"&gt;
&lt;li&gt;You can create tables using Markdown, type in the following and knit to see it looks like. Do both tables look the same after being rendered? What are the snippets below each table&amp;nbsp;doing?&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;| Column 1 | Column 2 | Column 3 | Column 4 |
| --- | ---: | :---: | :--- |
| Notice | what | the | colons |
| are | doing? | | |

Table: The table with poor spacing

| Column 1 | Column 2 | Column 3 | Column 4 |
| -------- | -------: | :------: | :------- |
| Notice   | what     | the      | colons   |
| are      | doing?   |          |          |

Table: The table with good spacing&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="4" class="example" type="1"&gt;
&lt;li&gt;Copy-and-paste one of the above tables and then add a fifth column. There should be text in both rows of the fifth&amp;nbsp;column.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Of course, there isn’t much point to this if we don’t include code snippets. Let’s try a couple of different commands, shall&amp;nbsp;we?&lt;/p&gt;
&lt;ol start="5" class="example" type="1"&gt;
&lt;li&gt;Type the following code block into your file, then click the green “play” icon that appears to the right of your code block. Explain what you’re getting as&amp;nbsp;output.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;```{r}
qplot(x = displ, y = hwy, data = mpg)
```&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="6" class="example" type="1"&gt;
&lt;li&gt;What output do you get if you type the following in a code block? Do you see a connection between certain parts of this output and the one from the previous question? If so, what are they? If not, why isn’t there a&amp;nbsp;connection?&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;```{r}
print(mpg)
```&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="knitting-your-document"&gt;Knitting your&amp;nbsp;document&lt;/h2&gt;
&lt;p&gt;We’ve done enough demonstration for now. First, check that there are no errors when you click “knit”. Try knitting your lab report using both the &lt;code&gt;Knit to HTML&lt;/code&gt; and &lt;code&gt;Knit to PDF&lt;/code&gt; options and inspect the resulting documents. If the documents look good, then save your files and then stage, commit, and push your changes to the Github site. Do not try to commit and push the &lt;span class="caps"&gt;HTML&lt;/span&gt; and &lt;span class="caps"&gt;PDF&lt;/span&gt; documents, those will get uploaded&amp;nbsp;elsewhere.&lt;/p&gt;
&lt;h2 id="how-to-submit"&gt;How to&amp;nbsp;submit&lt;/h2&gt;
&lt;p&gt;When you are ready to submit, be sure to save, commit, and push your final result so that everything is synchronized to Github. Then, navigate to &lt;strong&gt;your copy&lt;/strong&gt; of the Github repository you used for this assignment. You should see your repository, along with the updated files that you just synchronized to Github. Confirm that your files are up-to-date, and then do the following&amp;nbsp;steps:&lt;/p&gt;
&lt;div class="pull-request"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Click the &lt;em&gt;Pull Requests&lt;/em&gt; tab near the top of the&amp;nbsp;page.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the green button that says “New pull&amp;nbsp;request”.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the dropdown menu button labeled “base:”, and select the option &lt;code&gt;starting&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Confirm that the dropdown menu button labeled “compare:” is set to &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the green button that says “Create pull&amp;nbsp;request”.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Give the &lt;em&gt;pull request&lt;/em&gt; the following title: &lt;span class="monospace"&gt;Submission: Lab 1, FirstName LastName&lt;/span&gt;, replacing &lt;span class="monospace"&gt;FirstName&lt;/span&gt; and &lt;span class="monospace"&gt;LastName&lt;/span&gt; with your actual first and last&amp;nbsp;name.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the messagebox, write: &lt;span class="monospace"&gt;My lab report is ready for grading @jkglasbrenner&lt;/span&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Click “Create pull request” to lock in your&amp;nbsp;submission.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="credits"&gt;Credits&lt;/h2&gt;
&lt;p&gt;This lab is licensed under a &lt;a href="http://creativecommons.org/licenses/by-nc-sa/4.0/"&gt;Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License&lt;/a&gt;. Adapted by James Glasbrenner for &lt;span class="caps"&gt;CDS&lt;/span&gt;-102 from &lt;a href="https://www2.stat.duke.edu/courses/Summer15/sta104.01-1/post/labs/lab0.html"&gt;Lab 0 - Introduction to R and RStudio&lt;/a&gt; by &lt;a href="https://stat.duke.edu/~mc301"&gt;Mine Çetinkaya-Rundel&lt;/a&gt; and the &lt;a href="https://github.com/jfiksel/github-classroom-for-students"&gt;Github Classroom Guide for Students&lt;/a&gt; by &lt;a href="https://github.com/jfiksel"&gt;Jacob Fiksel&lt;/a&gt;.&lt;/p&gt;
</content><category term="lab"></category></entry></feed>