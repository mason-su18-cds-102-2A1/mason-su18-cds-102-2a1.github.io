<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>CDS-102: Introduction to Computational and Data Sciences Lab</title><link href="https://mason-su18-cds-102-2a1.github.io/" rel="alternate"></link><link href="https://mason-su18-cds-102-2a1.github.io/feeds/all.atom.xml" rel="self"></link><id>https://mason-su18-cds-102-2a1.github.io/</id><updated>2018-05-29T13:30:00-04:00</updated><entry><title>Exploration by visualization: the Galton dataset</title><link href="https://mason-su18-cds-102-2a1.github.io/labs/lab-02-exploration-by-visualization-the-galton-dataset/" rel="alternate"></link><published>2018-05-29T13:30:00-04:00</published><updated>2018-05-29T13:30:00-04:00</updated><author><name>Dr. Glasbrenner</name></author><id>tag:mason-su18-cds-102-2a1.github.io,2018-05-29:/labs/lab-02-exploration-by-visualization-the-galton-dataset/</id><summary type="html">Explore the Galton dataset using data&amp;nbsp;visualization.</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;This week’s lab shows you how to use the &lt;span class="monospace"&gt;ggplot2&lt;/span&gt; package to visualize datasets and how visualization plays a crucial role in data&amp;nbsp;exploration.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="why-data-visualization"&gt;Why data&amp;nbsp;visualization?&lt;/h2&gt;
&lt;p&gt;Why is data visualization an important topic? On the face of it, you might wonder why we need to dedicate any time to this topic. Aren’t plots really easy now that we all have computers? And isn’t making plots and figures one of the &lt;em&gt;last&lt;/em&gt; things that we do for a project or lab report, after we’ve figured everything out? Why start with this? Since a picture (or visualization) is worth a thousand words, take a moment to explore the data visualizations linked&amp;nbsp;below.&lt;/p&gt;
&lt;div class="callout primary"&gt;
&lt;p&gt;&lt;strong&gt;After a few minutes, be prepared to share with the class one thing you noticed about one of the visualizations that you think made it effective at conveying&amp;nbsp;information.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Why do buses bunch? &lt;a href="http://setosa.io/bus/" class="uri"&gt;http://setosa.io/bus/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;U.S.&lt;/span&gt; Age Pyramid Becomes a Rectangle: &lt;a href="http://www.pewresearch.org/next-america/#Two-Dramas-in-Slow-Motion" class="uri"&gt;http://www.pewresearch.org/next-america/#Two-Dramas-in-Slow-Motion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Visualizations have an important role to play in nearly every stage of a data science project. High-quality visualizations help people to understand your results and can activate their curiosity about your work and ideas. Creating visualizations in R is also easy and fun, and learning how to make them will help you become more comfortable with using R and RStudio. You will quickly see how simple it is to make colorful and eye-catching&amp;nbsp;plots!&lt;/p&gt;
&lt;div class="callout secondary"&gt;
&lt;p&gt;We will use the &lt;code&gt;ggplot2&lt;/code&gt; library for all of our visualizations. You are encouraged to download and use the &lt;a href="https://www.rstudio.com/wp-content/uploads/2016/11/ggplot2-cheatsheet-2.1.pdf"&gt;official &lt;code&gt;ggplot2&lt;/code&gt; cheatsheet&lt;/a&gt; for this and future&amp;nbsp;labs.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="about-this-weeks-dataset"&gt;About this week’s&amp;nbsp;dataset&lt;/h2&gt;
&lt;p&gt;You will be exploring the famous dataset by Francis Galton for this week’s lab on data visualization, which is automatically loaded into the variable &lt;code&gt;galton&lt;/code&gt; for you in the RMarkdown file for your lab report. Francis Galton was developing ways to quantify the heritability of traits in the 1880s, and as part of this work he collected data on the heights of adult children and their parents. To explore the dataset, type the following in your &lt;em&gt;Console&lt;/em&gt;&amp;nbsp;window:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;View(galton)&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="variables"&gt;Variables&lt;/h3&gt;
&lt;p&gt;This is a tabular dataset with 898 observations on the following&amp;nbsp;variables:&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style="width: 7%" /&gt;
&lt;col style="width: 5%" /&gt;
&lt;col style="width: 87%" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th style="text-align: left;"&gt;Variable&lt;/th&gt;
&lt;th style="text-align: left;"&gt;Type&lt;/th&gt;
&lt;th style="text-align: left;"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: left;"&gt;&lt;span class="monospace"&gt;family&lt;/span&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;span class="monospace"&gt;chr&lt;/span&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;a category with levels for each family&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td style="text-align: left;"&gt;&lt;span class="monospace"&gt;father&lt;/span&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;span class="monospace"&gt;dbl&lt;/span&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;the father’s height (in inches)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: left;"&gt;&lt;span class="monospace"&gt;mother&lt;/span&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;span class="monospace"&gt;dbl&lt;/span&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;the mother’s height (in inches)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td style="text-align: left;"&gt;&lt;span class="monospace"&gt;sex&lt;/span&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;span class="monospace"&gt;chr&lt;/span&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;the child’s sex: &lt;span class="monospace"&gt;F&lt;/span&gt; or &lt;span class="monospace"&gt;M&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: left;"&gt;&lt;span class="monospace"&gt;height&lt;/span&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;span class="monospace"&gt;dbl&lt;/span&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;the child’s height as an adult (in inches)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td style="text-align: left;"&gt;&lt;span class="monospace"&gt;nkids&lt;/span&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;&lt;span class="monospace"&gt;int&lt;/span&gt;&lt;/td&gt;
&lt;td style="text-align: left;"&gt;the number of adult children in the family, or, at least, the number whose heights Galton recorded.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="sources"&gt;Sources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The data were transcribed by &lt;span class="caps"&gt;J.A.&lt;/span&gt; Hanley who has published them at &lt;a href="http://www.medicine.mcgill.ca/epidemiology/hanley/galton/" class="uri"&gt;http://www.medicine.mcgill.ca/epidemiology/hanley/galton/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Reference: “‘Transmuting’ women into men: Galton’s family data on human stature” (2004) &lt;em&gt;The American Statistician&lt;/em&gt;,&amp;nbsp;58(3):237-243.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="visualization-by-example"&gt;Visualization by&amp;nbsp;example&lt;/h2&gt;
&lt;p&gt;Before we discuss the general format for creating &lt;span class="monospace"&gt;ggplot2&lt;/span&gt; plots, let’s play around with some&amp;nbsp;examples:&lt;/p&gt;
&lt;ol class="example" type="1"&gt;
&lt;li&gt;&lt;p&gt;In your lab report, create an R code block that contains the following&amp;nbsp;code:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;ggplot(data = galton) +
  geom_histogram(mapping = aes(x = height), bins = 30)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To run the code, either click the green “play” button in the upper right corner of the R code block or, while your cursor is inside the code block, press &lt;code&gt;&amp;lt;CTRL&amp;gt;-&amp;lt;SHIFT&amp;gt;-&amp;lt;ENTER&amp;gt;&lt;/code&gt;. This should create a plot called a&amp;nbsp;histogram.&lt;/p&gt;
&lt;p&gt;After creating the histogram, look at the &lt;code&gt;height&lt;/code&gt; column in the data table you can view with &lt;code&gt;View(galton)&lt;/code&gt; and compare it with the histogram. Then, describe what the histogram is doing with the data in this&amp;nbsp;column.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The input parameter &lt;code&gt;bins = 30&lt;/code&gt; controls an important visual element in the histogram plot. Let’s experiment with the parameter in order to figure out what it&amp;nbsp;does.&lt;/p&gt;
&lt;ol start="2" class="example" type="1"&gt;
&lt;li&gt;Using the code you wrote in &lt;strong&gt;Exercise 1&lt;/strong&gt; as a starting point, try setting the input keyword &lt;code&gt;bins&lt;/code&gt; equal to something &lt;em&gt;larger&lt;/em&gt; than the number 30, and then equal to something &lt;em&gt;smaller&lt;/em&gt; than the number 30. This will create two plots. Then, change the input keyword from &lt;code&gt;bins&lt;/code&gt; to &lt;code&gt;binwidth&lt;/code&gt; and set its value equal to 1. Compare the plots and write a conclusion about what the &lt;code&gt;bins&lt;/code&gt; and &lt;code&gt;binwidth&lt;/code&gt; inputs&amp;nbsp;control.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It is simple to add additional arguments to the aesthetic input &lt;code&gt;aes()&lt;/code&gt; that change the way data are shown, which can reveal trends that were previously hidden from view. Let’s see what the &lt;code&gt;fill&lt;/code&gt; argument does to our&amp;nbsp;histogram:&lt;/p&gt;
&lt;ol start="3" class="example" type="1"&gt;
&lt;li&gt;&lt;p&gt;Write the following code in your lab&amp;nbsp;report:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;ggplot(data = iris) +
  geom_histogram(
    mapping=aes(x = height, fill = sex), binwidth = 1, alpha = 0.5,
    position=&amp;quot;identity&amp;quot;
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run the block and look at the output. What did adding &lt;code&gt;fill = sex&lt;/code&gt; do? Does this change the way you might interpret the visualization? What kinds of differences stand out now that we added&amp;nbsp;this?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As you can now see, changing one of the inputs in your &lt;span class="monospace"&gt;ggplot2&lt;/span&gt; code can have a substantial effect on the way your visualization looks. When a visualization reveals new information, we should describe and interpret it in our lab&amp;nbsp;reports.&lt;/p&gt;
&lt;ol start="4" class="example" type="1"&gt;
&lt;li&gt;Describe the shape of the male and female height distributions and where they seem to be centered around. Upon your visual inspection, does there appear to be a tangible difference in the average height for these two distributions? Based on what you know about the relative heights of people, is this a result that you would have expected to see? Why or why&amp;nbsp;not?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Based on what you’ve seen so far, do you understand what &lt;strong&gt;all&lt;/strong&gt; of the inputs are doing? The exercise below guides you through the process of exploring how the different inputs affect the plot’s&amp;nbsp;look:&lt;/p&gt;
&lt;ol start="5" class="example" type="1"&gt;
&lt;li&gt;&lt;p&gt;A good way to figure out how R works is to experiment with inputs. What happens if you change the value of &lt;code&gt;alpha = 0.5&lt;/code&gt; (keep it between 0 and 1). What happens if you remove the input &lt;code&gt;position = &amp;quot;identity&amp;quot;&lt;/code&gt;? What happens if you replace it with &lt;code&gt;position = &amp;quot;dodge&amp;quot;&lt;/code&gt;? What does it change in your&amp;nbsp;output?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt; When moving the input, be careful with the commas! A comma should separate each&amp;nbsp;input.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="the-ggplot2-syntax"&gt;The &lt;span class="monospace"&gt;ggplot2&lt;/span&gt;&amp;nbsp;syntax&lt;/h2&gt;
&lt;p&gt;Let’s take a small break from making plots and review the general syntax for creating a &lt;span class="monospace"&gt;ggplot2&lt;/span&gt; figure. The command &lt;code&gt;ggplot()&lt;/code&gt;, as you might have figured out already, creates the plot window. Commands with the prefix &lt;code&gt;geom_&lt;/code&gt; — such as &lt;code&gt;geom_histogram()&lt;/code&gt; — convert data points into different kinds of visualizations, and the command &lt;code&gt;aes()&lt;/code&gt; controls the aesthetic properties of each &lt;code&gt;geom_&lt;/code&gt; object. We then specify input parameters inside the parentheses of these commands, &lt;em&gt;with each input separated from neighboring inputs by commas&lt;/em&gt; &lt;code&gt;,&lt;/code&gt; &lt;em&gt;and input names and values separated by the equals sign&lt;/em&gt; &lt;code&gt;=&lt;/code&gt;. In general, visualizations in &lt;span class="monospace"&gt;ggplot2&lt;/span&gt; have a predictable structure for the commands you need to enter. The general pattern&amp;nbsp;is:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;ggplot(data = &amp;lt;data&amp;gt;) +                     # Required in all ggplot2 visualizations
  geom_&amp;lt;function&amp;gt;(
    mapping = aes(&amp;lt;mapping&amp;gt;),               # Required in all ggplot2 visualizations
    stat = &amp;lt;stat&amp;gt;,                          # Optional, sensible default chosen
    position = &amp;lt;position&amp;gt;                   # Optional, sensible default chosen
  ) +
  coord_&amp;lt;function&amp;gt; +                        # Optional, sensible default chosen
  facet_&amp;lt;function&amp;gt; +                        # Optional, sensible default chosen
  scale_&amp;lt;function&amp;gt; +                        # Optional, sensible default chosen
  theme_&amp;lt;function&amp;gt;                          # Optional, sensible default chosen&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above, anywhere you see a word &lt;span class="monospace"&gt;&lt;surrounded&gt;&lt;/span&gt; in angular brackets, you can replace it with one of several choices. Bare minimum, you must always specify the first two functions, all the rest are optional and have sensible defaults chosen for you. Also note that each major category, those being &lt;span class="monospace"&gt;geom_&lt;/span&gt; objects, &lt;span class="monospace"&gt;coord_&lt;/span&gt; objects, &lt;span class="monospace"&gt;facet_&lt;/span&gt; objects, &lt;span class="monospace"&gt;scale_&lt;/span&gt; objects, and &lt;span class="monospace"&gt;theme_&lt;/span&gt; objects, are added to the &lt;span class="monospace"&gt;ggplot2&lt;/span&gt; “sentence” via the plus sign &lt;code&gt;+&lt;/code&gt;. Think of it as a series of layers: first you lay down the canvas (&lt;code&gt;ggplot&lt;/code&gt;), then you plot the data using a certain type of plot (&lt;code&gt;geom_&amp;lt;function&amp;gt;&lt;/code&gt;) as the second layer, and afterward you tweak and polish the plot using additional layers to find-tune things. This layered approach allows you to create nice figures without much effort or the need to memorize dozens of&amp;nbsp;commands.&lt;/p&gt;
&lt;h2 id="scatterplots"&gt;Scatterplots&lt;/h2&gt;
&lt;p&gt;Let’s further explore the data using another type of visualization, the&amp;nbsp;scatter-plot.&lt;/p&gt;
&lt;ol start="6" class="example" type="1"&gt;
&lt;li&gt;&lt;p&gt;Use the following code to create a scatter-plot of each person’s height as a function of their father’s&amp;nbsp;height.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;ggplot(data = galton) +
  geom_point(mapping = aes(x = father, y = height))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, &lt;code&gt;height&lt;/code&gt; is the response (dependent) variable and &lt;code&gt;father&lt;/code&gt; would be the explanatory (independent) variable. Describe any trends that you see using full&amp;nbsp;sentences.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Next, we should try and create a plot that is similar in spirit to what we did in &lt;strong&gt;Exercise 3&lt;/strong&gt;, so that we can see how the &lt;code&gt;height&lt;/code&gt; variable depends on the &lt;code&gt;father&lt;/code&gt; variable when the &lt;code&gt;sex&lt;/code&gt; variable is taken into account. One important difference to know is that we need to use the word &lt;code&gt;color&lt;/code&gt; as an input instead of &lt;code&gt;fill&lt;/code&gt;. Otherwise, the procedure for grouping over the &lt;code&gt;sex&lt;/code&gt; variable is basically the&amp;nbsp;same.&lt;/p&gt;
&lt;ol start="7" class="example" type="1"&gt;
&lt;li&gt;Figure out how to group the data over the &lt;code&gt;sex&lt;/code&gt; variable using the &lt;code&gt;color&lt;/code&gt; input and create a new plot. What does this plot tell you about the relationship between the height measurements and the &lt;code&gt;sex&lt;/code&gt; variable?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="faceting"&gt;Faceting&lt;/h2&gt;
&lt;p&gt;Let’s introduce another new concept, the facet. Facets create visualizations with multiple panels, splitting things up across a categorical variable. Let’s apply this to our scatter-plot that we created in &lt;strong&gt;Exercise 6&lt;/strong&gt;.&lt;/p&gt;
&lt;ol start="8" class="example" type="1"&gt;
&lt;li&gt;&lt;p&gt;Copy your code from &lt;strong&gt;Exercise 6&lt;/strong&gt; that created a scatter-plot. Add the following new command to your code snippet using the &lt;code&gt;+&lt;/code&gt; sign:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;facet_grid(. ~ sex)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Describe what you get as output. Then, create a new code block where you reverse the input for &lt;code&gt;facet_grid&lt;/code&gt; like&amp;nbsp;so:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;facet_grid(sex ~ .)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What did adding &lt;code&gt;facet_grid&lt;/code&gt; do to your output, and what does the order of &lt;code&gt;. ~ sex&lt;/code&gt; versus &lt;code&gt;sex ~ .&lt;/code&gt; seem to do? Is the information presented here any different from the information in &lt;strong&gt;Exercise 7&lt;/strong&gt;?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="modeling-in-ggplot2"&gt;Modeling in &lt;span class="monospace"&gt;ggplot2&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;You can actually create regression models using &lt;code&gt;geom_smooth&lt;/code&gt;, which is another handy way to look for trends. You can choose from one of several kinds of regression methods. Here, we’ll use linear regression for creating our models (perhaps you remember drawing one of these “lines of best fit” by hand in a prior science or math&amp;nbsp;class).&lt;/p&gt;
&lt;ol start="9" class="example" type="1"&gt;
&lt;li&gt;&lt;p&gt;Copy your code from &lt;strong&gt;Exercise 6&lt;/strong&gt; that created a scatter-plot. Add the following new command to your code snippet using the &lt;code&gt;+&lt;/code&gt; sign:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;geom_smooth(mapping = aes(x = father, y = height), method = &amp;quot;lm&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Describe the line that you get as output. Does it follow the trends (if any) you’ve previously described in the data? What do you think the semi-transparent gray region around the line stands&amp;nbsp;for?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When creating a graph, you often want to make some touch ups after you’ve figured out what to plot. Do the following to add some extra polish to the plot you made in &lt;strong&gt;Exercise 9&lt;/strong&gt;.&lt;/p&gt;
&lt;ol start="10" class="example" type="1"&gt;
&lt;li&gt;&lt;p&gt;Copy your code from &lt;strong&gt;Exercise 9&lt;/strong&gt; and add the following command to your&amp;nbsp;code:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;labs(
  title = &amp;quot;Height of children as adults versus the height of their fathers&amp;quot;,
  x = &amp;quot;Father&amp;#39;s height (in)&amp;quot;,
  y = &amp;quot;Adult child&amp;#39;s height (in)&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should also alter the size of the scatterplot circles by adding &lt;code&gt;size = 2&lt;/code&gt; as an input in &lt;code&gt;geom_point&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="additional-questions"&gt;Additional&amp;nbsp;questions&lt;/h2&gt;
&lt;div class="additional-questions"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Create a similar plot to &lt;strong&gt;Exercise 6&lt;/strong&gt; and make a scatter-plot of each person’s height as a function of their &lt;em&gt;mother’s&lt;/em&gt; height. Describe any trends that you see using full sentences. If there’s a trend both here and in &lt;strong&gt;Exercise 6&lt;/strong&gt;, does it follow the same general direction or does it not? If the trends move in the same direction, then does one trend look stronger than the other? If so, which one? Explain how you know this using full&amp;nbsp;sentences.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Start with your code from &lt;strong&gt;Exercise 8&lt;/strong&gt; and add a &lt;code&gt;geom_smooth&lt;/code&gt; command that separately performs a linear regression on the male and female categories. Each subplot (or facet) should have a line in it. Additionally, polish the graph using what you learned in &lt;strong&gt;Exercise 10&lt;/strong&gt;. Intrepret your results and explain how well these visualizations explain the trends in the dataset, if&amp;nbsp;any.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Compare the &lt;code&gt;geom_smooth&lt;/code&gt; trend-lines for when used the father’s height only and when you used both the father’s height and whether the child was male or female. Do they both show the same trend? Is one trend more “powerful” than the other? Why or why not? Remember to respond by writing full&amp;nbsp;sentences.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="how-to-submit"&gt;How to&amp;nbsp;submit&lt;/h2&gt;
&lt;p&gt;When you are ready to submit, be sure to save, commit, and push your final result so that everything is synchronized to Github. Then, navigate to &lt;strong&gt;your copy&lt;/strong&gt; of the Github repository you used for this assignment. You should see your repository, along with the updated files that you just synchronized to Github. Confirm that your files are up-to-date, and then do the following&amp;nbsp;steps:&lt;/p&gt;
&lt;div class="pull-request"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Click the &lt;em&gt;Pull Requests&lt;/em&gt; tab near the top of the&amp;nbsp;page.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the green button that says “New pull&amp;nbsp;request”.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the dropdown menu button labeled “base:”, and select the option &lt;code&gt;starting&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Confirm that the dropdown menu button labeled “compare:” is set to &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the green button that says “Create pull&amp;nbsp;request”.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Give the &lt;em&gt;pull request&lt;/em&gt; the following title: &lt;span class="monospace"&gt;Submission: Lab 2, FirstName LastName&lt;/span&gt;, replacing &lt;span class="monospace"&gt;FirstName&lt;/span&gt; and &lt;span class="monospace"&gt;LastName&lt;/span&gt; with your actual first and last&amp;nbsp;name.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the messagebox, write: &lt;span class="monospace"&gt;My lab report is ready for grading @jkglasbrenner&lt;/span&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Click “Create pull request” to lock in your&amp;nbsp;submission.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="credits"&gt;Credits&lt;/h2&gt;
&lt;p&gt;This lab is licensed under a &lt;a href="http://creativecommons.org/licenses/by-sa/4.0/"&gt;Creative Commons Attribution-ShareAlike 4.0 International License&lt;/a&gt;. &lt;a href="#about-the-galton-dataset"&gt;The description of the &lt;span class="monospace"&gt;Galton&lt;/span&gt; dataset&lt;/a&gt; was adapted from the documentation of the same dataset that’s available in the &lt;a href="https://github.com/ProjectMOSAIC/mosaicData"&gt;&lt;span class="monospace"&gt;mosaicData&lt;/span&gt; R package&lt;/a&gt; and some of the lab exercises were adapted from problem sets found in &lt;em&gt;Modern Data Science with R&lt;/em&gt; by Benjamin Baumer, Daniel Kaplan, and Nicholas Horton. All other exercises and instructions written by James Glasbrenner for &lt;span class="caps"&gt;CDS&lt;/span&gt;-102.&lt;/p&gt;
</content><category term="lab"></category></entry><entry><title>Reproducible research with RMarkdown and Github</title><link href="https://mason-su18-cds-102-2a1.github.io/labs/lab-01-learning-to-use-github-and-rmarkdown/" rel="alternate"></link><published>2018-05-24T13:30:00-04:00</published><updated>2018-05-24T13:30:00-04:00</updated><author><name>Dr. Glasbrenner</name></author><id>tag:mason-su18-cds-102-2a1.github.io,2018-05-24:/labs/lab-01-learning-to-use-github-and-rmarkdown/</id><summary type="html">Introducing R, RStudio, Github and&amp;nbsp;RMarkdown!</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;This first lab will serve as a general introduction to the major tools and platforms that we will be using throughout the semester, which are R, RStudio, and Git/Github. R is the name of the programming language itself and RStudio is a convenient interface, and both are installed on the lab computers. For this first lab, we request that you login to the RStudio Server &lt;a href="https://rstudio.cos.gmu.edu" class="uri"&gt;https://rstudio.cos.gmu.edu&lt;/a&gt;, as installing and setting up everything takes some&amp;nbsp;time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="rstudio"&gt;RStudio&lt;/h2&gt;
&lt;p&gt;The lab instructor will guide you through how to launch RStudio for the first time. When you launch RStudio, you will see an interface that looks something like&amp;nbsp;this:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://mason-su18-cds-102-2a1.github.io/img/rstudio_interface.png" title="plot of chunk rstudio-interface" alt="plot of chunk rstudio-interface" width="100%" style="display: block; margin: auto;" /&gt;&lt;/p&gt;
&lt;p&gt;The panel in the upper right contains your workspace as well as a history of the commands that you’ve previously entered. Any plots that you generate will show up in the panel in the lower right&amp;nbsp;corner.&lt;/p&gt;
&lt;p&gt;The panel on the lower left is where you can enter R commands. It’s called the &lt;em&gt;console&lt;/em&gt;. Everytime you launch RStudio, it will have the same text at the top of the console telling you the version of R that you’re running. Below that information is the &lt;em&gt;prompt&lt;/em&gt;. As its name suggests, this prompt is really a request, a request for a command. When you want to test out an R command and not necessarily save it to a file, this is the place to do&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;You will need to install some packages before going further. Enter the following command at the R prompt (i.e. right after &lt;code&gt;&amp;gt;&lt;/code&gt; on the console) by typing it&amp;nbsp;in:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;install.packages(&amp;quot;tidyverse&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will see some output pass by. Just let it run, and when it’s completed, move on to the next&amp;nbsp;section.&lt;/p&gt;
&lt;h2 id="getting-started-with-github"&gt;Getting started with&amp;nbsp;Github&lt;/h2&gt;
&lt;p&gt;Please sign up for an account on &lt;a href="http://github.com"&gt;Github&lt;/a&gt; using your Mason email address if you do not have one already. If you already have a Github account, please update your profile to use your Mason email address. If you would prefer to not do this, then create a second account using your Mason email address&amp;nbsp;instead.&lt;/p&gt;
&lt;p&gt;Obtain the Lab01 repository on GitHub through the link in Slack. Click “Clone or Download”, and make sure it says “Clone with &lt;span class="caps"&gt;SSH&lt;/span&gt;” in bold in the top left of the pop-up box. If not, click on the blue “use &lt;span class="caps"&gt;SSH&lt;/span&gt;” button on the top right of the pop-up box. Now copy the link in the box to your&amp;nbsp;clipboard.&lt;/p&gt;
&lt;p&gt;In RStudio, go to File -&amp;gt; New Project. Click Version Control, then Git. Paste the link you just copied into the Repository &lt;span class="caps"&gt;URL&lt;/span&gt; box. Leave the Project directory name blank. Click Browse and create a directory where you store your labs, for example as &lt;code&gt;Documents/102labs&lt;/code&gt;, and select it. An RStudio project should now open up, which will allow you to start working on your homework assignment. You will probably see a blank console screen. However, in RStudio you should also see a list of all of the files available. Click on the &lt;code&gt;lab01.Rmd&lt;/code&gt; file and edit away. If you save and close R Studio and want to go back to editing your project, open up R Studio, then go to File -&amp;gt; Open Project. Navigate to the project directory and double click on the .Rproj&amp;nbsp;file.&lt;/p&gt;
&lt;p&gt;Note that if you received an error in the above steps, you may have to clone with &lt;span class="caps"&gt;HTTPS&lt;/span&gt; instead of &lt;span class="caps"&gt;SSH&lt;/span&gt;. You can do this by again clicking on the “Clone or Download” button in the repository page, then clicking “Use &lt;span class="caps"&gt;HTTPS&lt;/span&gt;” in the top right of the pop-up box. Now copy the link and repeat this&amp;nbsp;step.&lt;/p&gt;
&lt;h2 id="getting-familiar-with-rmarkdown"&gt;Getting familiar with&amp;nbsp;RMarkdown&lt;/h2&gt;
&lt;p&gt;Now that you’ve obtained your personal lab template from Github and opened it in RStudio, we can start learning about RMarkdown. The instructor will play this video after you’ve had time to sign up for Github to introduce what RMarkdown&amp;nbsp;is:&lt;/p&gt;
&lt;!--html_preserve--&gt;
&lt;iframe class="vimeo-embed" src="https://player.vimeo.com/video/178485416" width="100%" height="350" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;
&lt;/iframe&gt;
&lt;!--/html_preserve--&gt;
&lt;p&gt;As you can see, the combination of RMarkdown and RStudio combines text processing with the ability to execute code written in R. However, unlike software like Microsoft Word, there aren’t any formatting buttons for doing things like creating &lt;strong&gt;bold&lt;/strong&gt; or &lt;em&gt;italicized&lt;/em&gt; text. So how can you format your text? RMarkdown does this using symbols that stand for different types of text markups. For example, typing &lt;code&gt;**bold text**&lt;/code&gt; in RMarkdown signals you want the words “bold text” to be bolded. Paragraphs are separated by a blank line, for&amp;nbsp;example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;This is the end of the first paragraph.

This starts the next paragraph.
However, putting a line right below it will not start a new paragraph.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s get some practice by typing in some&amp;nbsp;examples!&lt;/p&gt;
&lt;div class="callout secondary"&gt;
&lt;p&gt;There is an &lt;a href="/doc/rstudio-IDE-cheatsheet.pdf"&gt;official cheatsheet available for you to download&lt;/a&gt;. It’s recommended that you have this available to you at all times. You may even want to print it out before next class so that you can easily reference&amp;nbsp;it.&lt;/p&gt;
&lt;/div&gt;
&lt;ol class="example" type="1"&gt;
&lt;li&gt;Fill in your name and other information in the spaces at the top of the file if you haven’t already. Then, click the the “knit” icon just above the editing window (if a drop-down menu appears, choose “knit to &lt;span class="caps"&gt;HTML&lt;/span&gt;”). Based on the output that you see, explain what the &lt;code&gt;##&lt;/code&gt; and &lt;code&gt;####&lt;/code&gt; symbols are doing to the&amp;nbsp;text.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s write some more Markdown and see what it&amp;nbsp;does.&lt;/p&gt;
&lt;ol start="2" class="example" type="1"&gt;
&lt;li&gt;Type the code in the box below into your lab report file exactly you see it. Then, knit the file again and look at the output. Write a short explanation of what each markup symbol&amp;nbsp;does.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;*What happens when you surround text with one-star pairs?*

**What happens when you surround text with two-star pairs?**

***What happens when you surround text with three-star pairs?***

1.  Start typing this list. Note there are two spaces between the period and the word &amp;quot;Start&amp;quot;.
2.  Type the second line of the list
1.  What happens if I type step 3 as another step 1?

*   What does this star at the beginning do?
*   Visually, it&amp;#39;s similar to the numbered list.

1.  What happens if we nest a list?
    1.  Type four spaces, then type the number
    2.  Did this do what you expected?
2.  What if we contine the numbers this way?
    *   What happens if we indent using stars?
    *   Let&amp;#39;s add another one for good measure.
        *   Can we get another level of nesting?
        
[What does this do?](https://google.com)
        
![How is this different from the above?](test-image.jpeg)&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="interlude-how-to-save-your-work-back-to-github"&gt;Interlude: How to save your work back to&amp;nbsp;Github&lt;/h2&gt;
&lt;p&gt;Now that you’ve typed some material into your RMarkdown document, let’s take a snapshot of our work using what is called a “commit”. First, save your work in the traditional way by going to File -&amp;gt; Save or clicking the floppy disk icon just above the editing window. Next, click on the &lt;span class="monospace"&gt;&lt;span class="caps"&gt;GIT&lt;/span&gt;&lt;/span&gt; toolbar dropdown menu and select “Commit”. You will see a list of one or more filenames. Click on one of them. You will see some text appear in the lower area. Text highlighted in green has been added to the file since the last snapshot, while text highlighted in red has been deleted. Next, to the left of the filenames is a checkbox marked “Staged”. Staging just means selecting the files that we want to use when taking a snapshot. Stage the file &lt;code&gt;lab01.Rmd&lt;/code&gt;. Then, to the right, write a brief, informative message in the text box labeled “Commit message”. When you are done, click the commit button just below this text&amp;nbsp;box.&lt;/p&gt;
&lt;div class="callout primary"&gt;
&lt;p&gt;Two things about committing. One, you should commit somewhat frequently. At minimum, you should try and make a commit each time that you’ve finished a lab exercise. Two, leave informative commit messages. “Added stuff” will not help you if you’re looking at your commit history in a year. A message like “Typed in Lab 1 RMarkdown examples” will be more&amp;nbsp;useful.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Important note!&lt;/strong&gt; The above process does all this saving and snapshoting on the local computer that you’re currently using. So far we have not synchronized &lt;em&gt;anything&lt;/em&gt; back to the Github website. Without synchronizing back, you will not be able to ultimately submit the lab or have the lab instructor read and grade it. Also, and this is important, if you don’t synchronize, you will not be able to work on your lab report from another&amp;nbsp;computer.&lt;/p&gt;
&lt;p&gt;In the world of Github, synchronizing &lt;em&gt;from&lt;/em&gt; our local computer &lt;em&gt;to&lt;/em&gt; the Github website is called a “Push”. So let’s do that now. In the interactive commit window we opened earlier, in the upper right-hand corner you should see a button labeled “Push”, click that now. Alternatively, if the interactive commit window isn’t open, you can just click on the &lt;span class="caps"&gt;GIT&lt;/span&gt; toolbar dropdown menu and select “Push&amp;nbsp;branch”.&lt;/p&gt;
&lt;div class="callout primary"&gt;
&lt;p&gt;The synchronizing can go in the opposite direction as well, which is called a “Pull”. One reason you would use “Pull” is if you are working on the lab report from more than one computer throughout the day. You would push your commits from the first computer, move to the second computer, and then use pull to get all the changes you made and&amp;nbsp;synchronized.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id="more-markdown"&gt;More&amp;nbsp;Markdown&lt;/h2&gt;
&lt;p&gt;Now that we’ve saved and synchronized our work on Github, let’s return to RMarkdown. During the rest of the lab, you are encouraged to commit early and commit&amp;nbsp;often.&lt;/p&gt;
&lt;ol start="3" class="example" type="1"&gt;
&lt;li&gt;You can create tables using Markdown, type in the following and knit to see it looks like. Do both tables look the same after being rendered? What are the snippets below each table&amp;nbsp;doing?&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;| Column 1 | Column 2 | Column 3 | Column 4 |
| --- | ---: | :---: | :--- |
| Notice | what | the | colons |
| are | doing? | | |

Table: The table with poor spacing

| Column 1 | Column 2 | Column 3 | Column 4 |
| -------- | -------: | :------: | :------- |
| Notice   | what     | the      | colons   |
| are      | doing?   |          |          |

Table: The table with good spacing&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="4" class="example" type="1"&gt;
&lt;li&gt;Copy-and-paste one of the above tables and then add a fifth column. There should be text in both rows of the fifth&amp;nbsp;column.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Of course, there isn’t much point to this if we don’t include code snippets. Let’s try a couple of different commands, shall&amp;nbsp;we?&lt;/p&gt;
&lt;ol start="5" class="example" type="1"&gt;
&lt;li&gt;Type the following code block into your file, then click the green “play” icon that appears to the right of your code block. Explain what you’re getting as&amp;nbsp;output.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;```{r}
qplot(x = displ, y = hwy, data = mpg)
```&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="6" class="example" type="1"&gt;
&lt;li&gt;What output do you get if you type the following in a code block? Do you see a connection between certain parts of this output and the one from the previous question? If so, what are they? If not, why isn’t there a&amp;nbsp;connection?&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;```{r}
print(mpg)
```&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="knitting-your-document"&gt;Knitting your&amp;nbsp;document&lt;/h2&gt;
&lt;p&gt;We’ve done enough demonstration for now. First, check that there are no errors when you click “knit”. Try knitting your lab report using both the &lt;code&gt;Knit to HTML&lt;/code&gt; and &lt;code&gt;Knit to PDF&lt;/code&gt; options and inspect the resulting documents. If the documents look good, then save your files and then stage, commit, and push your changes to the Github site. Do not try to commit and push the &lt;span class="caps"&gt;HTML&lt;/span&gt; and &lt;span class="caps"&gt;PDF&lt;/span&gt; documents, those will get uploaded&amp;nbsp;elsewhere.&lt;/p&gt;
&lt;h2 id="how-to-submit"&gt;How to&amp;nbsp;submit&lt;/h2&gt;
&lt;p&gt;When you are ready to submit, be sure to save, commit, and push your final result so that everything is synchronized to Github. Then, navigate to &lt;strong&gt;your copy&lt;/strong&gt; of the Github repository you used for this assignment. You should see your repository, along with the updated files that you just synchronized to Github. Confirm that your files are up-to-date, and then do the following&amp;nbsp;steps:&lt;/p&gt;
&lt;div class="pull-request"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Click the &lt;em&gt;Pull Requests&lt;/em&gt; tab near the top of the&amp;nbsp;page.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the green button that says “New pull&amp;nbsp;request”.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the dropdown menu button labeled “base:”, and select the option &lt;code&gt;starting&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Confirm that the dropdown menu button labeled “compare:” is set to &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click the green button that says “Create pull&amp;nbsp;request”.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Give the &lt;em&gt;pull request&lt;/em&gt; the following title: &lt;span class="monospace"&gt;Submission: Lab 1, FirstName LastName&lt;/span&gt;, replacing &lt;span class="monospace"&gt;FirstName&lt;/span&gt; and &lt;span class="monospace"&gt;LastName&lt;/span&gt; with your actual first and last&amp;nbsp;name.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the messagebox, write: &lt;span class="monospace"&gt;My lab report is ready for grading @jkglasbrenner&lt;/span&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Click “Create pull request” to lock in your&amp;nbsp;submission.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="credits"&gt;Credits&lt;/h2&gt;
&lt;p&gt;This lab is licensed under a &lt;a href="http://creativecommons.org/licenses/by-nc-sa/4.0/"&gt;Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License&lt;/a&gt;. Adapted by James Glasbrenner for &lt;span class="caps"&gt;CDS&lt;/span&gt;-102 from &lt;a href="https://www2.stat.duke.edu/courses/Summer15/sta104.01-1/post/labs/lab0.html"&gt;Lab 0 - Introduction to R and RStudio&lt;/a&gt; by &lt;a href="https://stat.duke.edu/~mc301"&gt;Mine Çetinkaya-Rundel&lt;/a&gt; and the &lt;a href="https://github.com/jfiksel/github-classroom-for-students"&gt;Github Classroom Guide for Students&lt;/a&gt; by &lt;a href="https://github.com/jfiksel"&gt;Jacob Fiksel&lt;/a&gt;.&lt;/p&gt;
</content><category term="lab"></category></entry></feed>